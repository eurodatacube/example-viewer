{"version":1,"kind":"Notebook","sha256":"949179a378a22eafcbddd6678a2a5c1e2ec9abd6df35f4677dfca9fd70e9723d","slug":"external-notebooks.eurodatacube.notebooks.notebooks.contributions.client-side-processing-using-mass-sh","location":"/external_notebooks/eurodatacube/notebooks/notebooks/contributions/client-side-processing-using-mass-sh.ipynb","dependencies":[],"frontmatter":{"title":"Important notes","content_includes_title":true,"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"github":"https://github.com/esa-earthcode/example-viewer/","subject":"EarthCODE Examples","numbering":{"title":{"offset":5}},"edit_url":"https://github.com/esa-earthcode/example-viewer//blob/main/external_notebooks/eurodatacube/notebooks/notebooks/contributions/client-side-processing-using-mass-sh.ipynb","exports":[{"format":"ipynb","filename":"client-side-processing-using-mass-sh.ipynb","url":"/example-viewer/build/client-side-processi-7956a5747789e6fde66dc1bb0afd3d16.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"from edc import setup_environment_variables\nsetup_environment_variables()","key":"ppc6jYiRsR"},{"type":"output","id":"0lQq71nAIZL5pIxzjZMj7","data":[{"output_type":"display_data","metadata":{},"data":{"text/markdown":{"content":"API credentials have automatically been injected for your active subscriptions.  \nThe following environment variables are now available:\n* `SH_CLIENT_NAME`\n* `SH_CLIENT_SECRET`\n* `SH_INSTANCE_ID`\n* `SH_CLIENT_ID`\n\nThe following additional environment variables have been loaded from `~/custom.env`:\n* `REFERENCE_DATA`\n* `AWS_BUCKET`\n* `OGC_EDC_URL`\n* `DB_HOST`\n* `DB_NAME`\n* `DB_USER`\n* `DB_PASSWORD`\n------\n","content_type":"text/markdown"},"text/plain":{"content":"<IPython.core.display.Markdown object>","content_type":"text/plain"}}}],"key":"F3jMOajKXC"}],"key":"MFvYm8JIgl"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Important notes","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"WgWb4tsVSJ"}],"identifier":"important-notes","label":"Important notes","html_id":"important-notes","implicit":true,"key":"WgVM97ta88"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"This notebook requires:","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"N8U2p6MiMm"}],"key":"SgbmdLIIZh"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":3,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"AWS credentials -> for boto3 setup options see ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"BumwmcGRmM"},{"type":"link","url":"https://boto3.amazonaws.com/v1/documentation/api/latest/guide/configuration.html","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"https://​boto3​.amazonaws​.com​/v1​/documentation​/api​/latest​/guide​/configuration​.html","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ssnmlf1cxX"}],"urlSource":"https://boto3.amazonaws.com/v1/documentation/api/latest/guide/configuration.html","key":"l0ek0EZMaf"}],"key":"KDmipobZU5"},{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"S3 bucket (exposed as environment variable AWS_BUCKET) -> for bucket configuration see ","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"KEca1ITG4N"},{"type":"link","url":"https://docs.sentinel-hub.com/api/latest/#/BATCH_API/batch_processor","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"https://​docs​.sentinel​-hub​.com​/api​/latest​/​#​/BATCH​_API​/batch​_processor","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"jSRS93NrNa"}],"urlSource":"https://docs.sentinel-hub.com/api/latest/#/BATCH_API/batch_processor","key":"FLiLDIgqQd"}],"key":"eLK3PExQ5p"}],"key":"Pbx2EZGltY"}],"key":"K8XHVGXDwr"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Client Side Processing using data prepared via EDC Mass Sentinel Hub","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"BKj5DFltlA"}],"identifier":"client-side-processing-using-data-prepared-via-edc-mass-sentinel-hub","label":"Client Side Processing using data prepared via EDC Mass Sentinel Hub","html_id":"client-side-processing-using-data-prepared-via-edc-mass-sentinel-hub","implicit":true,"key":"fePh3VTZnT"}],"key":"p8uUA2Vgbe"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"OcupMWzMA5"}],"identifier":"imports","label":"Imports","html_id":"imports","implicit":true,"key":"b0s3Aqewsg"}],"key":"AAG9v4PRcM"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# util\nimport numpy as np\nimport xarray as xr\nimport boto3\nimport json\nimport csv\nimport io\nfrom IPython.display import clear_output\n\n# date & time\nimport time\nfrom datetime import timezone, date, datetime\nfrom dateutil.relativedelta import relativedelta as rdelta\nfrom dateutil.rrule import rrule, MONTHLY\n\n# Oauth\nfrom oauthlib.oauth2 import BackendApplicationClient\nfrom requests_oauthlib import OAuth2Session","key":"DNdgaVoHJp"},{"type":"output","id":"MGCIYUrwbhPKU1heP55YO","data":[],"key":"D0ZY8cDEKd"}],"key":"byVuRDe1He"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Get authorization token","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"uNDcLBHotS"}],"identifier":"get-authorization-token","label":"Get authorization token","html_id":"get-authorization-token","implicit":true,"key":"VAU200JX7P"}],"key":"UxLBUDI7ML"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Your client credentials\nclient_id = %env SH_CLIENT_ID\nclient_secret = %env SH_CLIENT_SECRET\n\n# Create a session\nclient = BackendApplicationClient(client_id=client_id)\noauth = OAuth2Session(client=client)\n\ntoken = oauth.fetch_token(token_url='https://services.sentinel-hub.com/oauth/token',\n                          client_id=client_id, client_secret=client_secret)\n\nresp = oauth.get(\"https://services.sentinel-hub.com/oauth/tokeninfo\")","key":"lx54ESpMYH"},{"type":"output","id":"nh0A6KvnfZ4bXaL4xESKx","data":[],"key":"iq0qmagWDj"}],"key":"XKYGdyhNGB"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Configure Request","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"oWVeXxJeOs"}],"identifier":"configure-request","label":"Configure Request","html_id":"configure-request","implicit":true,"key":"EfA9OqlE5a"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Enter start and end date, input bands, indices. The resulting data cube will have two time intervals per month, being split at ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"KlKVM6WZR5"},{"type":"inlineCode","value":"day_of_new_interval","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"mcULm2FSgF"},{"type":"text","value":".","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"M8V3I9ESQP"}],"key":"aR3vlQoLdT"}],"key":"bRtTlMPoRz"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"startdate = date(2018,7,1) # Y,M,D\nenddate = date(2018,9,15)  # Y,M,D\n\ninput_bands = [\"B03\",\n               \"B04\",\n               \"B05\",\n               \"B08\"]\nindices = ['NDVI',\n           \"NDWI\",\n           \"CVI\"]\n\nbucket_name = %env AWS_BUCKET\n\nday_of_new_interval = 16 # leave this unchanged in most of the cases","key":"D4B9CUpX48"},{"type":"output","id":"x-N4160qod2DIB8hi37-D","data":[],"key":"yJCBcVpo5o"}],"key":"WavD0nrS1T"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Calculate Data Cube Parameters","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"u9GC53RVJY"}],"identifier":"calculate-data-cube-parameters","label":"Calculate Data Cube Parameters","html_id":"calculate-data-cube-parameters","implicit":true,"key":"S5MQFXJX8g"}],"key":"Nenqo62JM8"},{"type":"block","kind":"notebook-code","data":{"scrolled":true},"children":[{"type":"code","lang":"python","executable":true,"value":"starttime = datetime(*startdate.timetuple()[:6])\nendtime = datetime(*enddate.timetuple()[:6])\n\nd=day_of_new_interval\ndates = list(rrule(MONTHLY, dtstart=startdate, until=enddate, bymonthday=[1,d-1,d,31]))\ndates = [starttime] + dates if dates[0] != starttime else dates\ndates = dates + [endtime] if dates[-1] != endtime else dates\n\nstarts = dates[0::2]\nstarts = [int(d.timestamp()) for d in starts] # timestamps for arithmetic\nends   = [d+rdelta(hour=23, minute=59, second=59) for d in dates[1::2]]\nends   = [int(d.timestamp()) for d in ends]   # timestamps for arithmetic\navg_times = list(np.mean(list(zip(starts,ends)), axis=1))\navg_times = [datetime.utcfromtimestamp(a) for a in avg_times]\navg_times = [dt.isoformat() for dt in avg_times]","key":"iPrYRSNXfP"},{"type":"output","id":"et32dAmQfe4NAkTU-W5wE","data":[],"key":"SFD1BUgbVH"}],"key":"kQRU4BmPAT"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"masks = [\"SCL\", \"dataMask\"] # SCL ... Scene Classification Layer\n\noutput_bands = input_bands + indices\noutput_array =  [ { 'id': \"\\\"\" + ob + \"\\\"\", 'bands': len(avg_times), \"sampleType\": \"SampleType.UINT16\"} for ob in output_bands ]\nfor oa in output_array:\n    if oa[\"id\"] == '\"CVI\"':\n        oa[\"sampleType\"] = \"SampleType.FLOAT32\"\noutput_array = str(output_array).replace(\"'\", '')\n\nint_bands = '{' + ','.join([f'{ib}: []' for ib in input_bands]) + '}'\nresults_object = '{' + ','.join([f'{ob}: []' for ob in output_bands]) + '}'\ndebug_results = '{' + ','.join([f\"{output_bands[i]}: [{i+1}]\" for i in range(len(output_bands))]) + '}'\nresponses = [{\"identifier\": ob,\"format\": {\"type\": \"image/tiff\"}} for ob in output_bands]","key":"MQlAjvZ6b3"},{"type":"output","id":"nW5wF82cq6HU5oQqbylRe","data":[],"key":"BwWoyZAE4T"}],"key":"L5Gyy9N4kW"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Define Evalscript & the Request Payload","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"AI3WA9WmTP"}],"identifier":"define-evalscript-the-request-payload","label":"Define Evalscript & the Request Payload","html_id":"define-evalscript-the-request-payload","implicit":true,"key":"Gz0F3IUEmf"}],"key":"U1NzDER9um"},{"type":"block","kind":"notebook-code","data":{"scrolled":true},"children":[{"type":"code","lang":"python","executable":true,"value":"#double curly brackets render as single curly brackets in f-strings\nevalscript = f\"\"\"\n//VERSION=3\n\nvar debug = []\n\nvar ic = {{  // index components\n  'NDVI':  [\"B08\", \"B04\"],\n  \"GNDVI\": [\"B08\", \"B03\"],\n  \"BNDVI\": [\"B08\", \"B02\"],\n  \"NDSI\":  [\"B11\", \"B12\"],\n  \"NDWI\":  [\"B03\", \"B08\"]\n}}\n\nfunction setup(ds) {{\n  return {{\n    input: [{{\n      bands: {str(input_bands + masks)}, \n      units: \"DN\"\n    }}],\n    output: {output_array},\n    mosaicking: Mosaicking.ORBIT       \n  }}\n}}\n\nfunction validate (sample) {{\n  if (sample.dataMask!=1) return false;\n  \n  var scl = Math.round(sample.SCL);\n  \n  if (scl === 3) {{ // SC_CLOUD_SHADOW\n    return false;\n  }} else if (scl === 9) {{ // SC_CLOUD_HIGH_PROBA\n    return false; \n  }} else if (scl === 8) {{ // SC_CLOUD_MEDIUM_PROBA\n    return false;\n  }} else if (scl === 7) {{ // SC_CLOUD_LOW_PROBA\n    //return false;\n  }} else if (scl === 10) {{ // SC_THIN_CIRRUS\n    return false;\n  }} else if (scl === 11) {{ // SC_SNOW_ICE\n    return false;\n  }} else if (scl === 1) {{ // SC_SATURATED_DEFECTIVE\n    return false;\n  }} else if (scl === 2) {{ // SC_DARK_FEATURE_SHADOW\n    //return false;\n  }}\n  return true;\n}}\n\nfunction calculateIndex(a,b)\n{{\n  if ((a+b)==0) return 0;\n  // stretch [-1,+1] to [0,1]\n  return ((a-b)/(a+b)+1)/2;\n}}\n\nfunction interpolatedValue(arr)\n{{\n  //here we define the function on how to define the proper value - e.g. linear interpolation; we will use average \n  if (arr.length==0) return 0;\n  if (arr.length==1) return arr[0];\n  var sum = 0;\n  for (j=0;j<arr.length;j++)\n  {{sum+=arr[j];}}\n  return Math.round(sum/arr.length);\n}}\n\nvar results = {results_object}\n\n// We split each month into two halves. This will make it easier to append months to data cube later\nvar day_of_new_interval = {day_of_new_interval}\nvar endtime = new Date({datetime(*enddate.timetuple()[:3],23,59,59).timestamp()*1000}) // UNIX epoch in ms\n\nfunction evaluatePixel(samples, scenes, inputMetadata, customData, outputMetadata) {{\n  \n  //Debug part returning \"something\" if there are no  valid samples (no observations)\n  if (!samples.length)\n  return {debug_results}\n  \n  var is_in_last_half_of_month = endtime.getUTCDate() >= day_of_new_interval\n  var i = 0; // interval number\n  var int_bands = {int_bands}\n  \n  for (var j = 0; j < samples.length; j++) {{\n    \n    //TODO order should be reversed when we go leastRecent\n    \n    // if scene is outside of current half of month, fill result array and change half of month\n    // algorithm starts with most recent observation\n    if (( !is_in_last_half_of_month && scenes[j].date.getUTCDate() >= day_of_new_interval) ||\n    (  is_in_last_half_of_month && scenes[j].date.getUTCDate() <  day_of_new_interval))\n    {{\n      fillResultArray(i, int_bands)\n      \n      //reset values\n      for (var int_b in int_bands) {{\n        int_bands[int_b] = []\n      }}\n      \n      is_in_last_half_of_month = !is_in_last_half_of_month;\n      i++;\n    }}\n    \n    if (validate(samples[j]))\n    {{\n      // push input samples into their respective arrays\n      for (var int_b in int_bands) {{\n        int_bands[int_b].push(samples[j][int_b])\n      }}\n    }}\n    \n  }}\n  \n  //execute this for the last interval \n  fillResultArray(i, int_bands);\n  \n  return results\n}}\n\nfunction fillResultArray(i, int_bands)\n{{\n  for (var b in int_bands) {{\n    if(int_bands[b].length==0) results[b][i] = 0\n    else results[b][i] = interpolatedValue(int_bands[b])\n  }}\n  \n  for (var ix of {indices}) {{\n    if(ic.hasOwnProperty(ix)) {{\n      results[ix][i] = 65535*calculateIndex(\n        results[ic[ix][0]][i],\n        results[ic[ix][1]][i]\n      )\n    }}\n    if(ix===\"CVI\"){{\n      // output sample type for CVI is FLOAT32\n      results[ix][i] = results[\"B08\"][i]*results[\"B05\"][i] / (results[\"B03\"][i]*results[\"B03\"][i])\n    }}\n  }}\n}}\n\nfunction updateOutputMetadata(scenes, inputMetadata, outputMetadata) {{\n  outputMetadata.userData = {{\n    \"date_created\": Date(),\n    \"metadata\": scenes.map(s => {{\n      s.date = s.date.toString()\n      return s\n    }}),\n    \"time\" : {avg_times},\n    \"debug\": debug\n  }}\n}}\n\"\"\"","key":"NjYiN6rmDM"},{"type":"output","id":"WOeGi0aYVh-q1gJXwxjsx","data":[],"key":"cpBKjZ6WeE"}],"key":"pDPlxUcKTd"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"payload = {\n  \"processRequest\": {\n    \"input\": {\n      \"bounds\": {\n        \"properties\": {\n          \"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"\n        },\n        \"bbox\": [16.446445736463346, 47.680841561177864, 16.49776618971013, 47.72587417451863]\n      },\n      \"data\": [\n        {\n          \"location\": \"AWS:eu-central-1\",\n          \"type\": \"S2L2A\",\n          \"dataFilter\": {\n            \"timeRange\": {\n              \"from\": starttime.isoformat() + 'Z',\n              \"to\": endtime.isoformat() + 'Z'\n            },\n            \"mosaickingOrder\": \"mostRecent\",\n            \"maxCloudCoverage\": 100,\n            \"previewMode\": \"DETAIL\"\n          }\n        }\n      ]\n    },\n    \"output\": {\n      \"responses\": [*responses]\n    },\n    \"evalscript\": evalscript\n  },\n  \"tilingGridId\": 0,\n  \"bucketName\": bucket_name,\n  \"resolution\": 60.0,\n  \"description\": \"Test Loipersbach\"\n}\n\nheaders = {\n  #'Accept': 'application/tar'\n}","key":"PSeEapkRWd"},{"type":"output","id":"H30pnhrq56v4qUjaaxYRN","data":[],"key":"OoDnc13XDo"}],"key":"SYlBsWw8hC"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Send Request and Create Data Cube","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"hEhc05p929"}],"identifier":"send-request-and-create-data-cube","label":"Send Request and Create Data Cube","html_id":"send-request-and-create-data-cube","implicit":true,"key":"QIeMsLoePY"}],"key":"VcPmHdNj0x"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"def generate_url(request_id=\"\", action=\"\"):\n    url = 'https://services.sentinel-hub.com/batch/v1/process/'\n    if request_id:\n        url += f'{request_id}/'\n        if action:\n            url += f'{action}'\n    return url","key":"xhPiM3wLE3"},{"type":"output","id":"_JGiwr-hF2wxb9dEdbn-t","data":[],"key":"vWffrmx5Kv"}],"key":"QH0NXSrI71"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"%%time\n# Creating request\nresponse = oauth.request(\"POST\", generate_url(), headers=headers, json = payload).json()\nrequest_id = response[\"id\"]\n\n# Starting processing\noauth.request(\"POST\", generate_url(request_id, 'start'))\n\n# Polling for completion\nresponse_status = \"\"\nwhile response_status not in ['DONE', 'FAILED']:\n    clear_output(True); print('Waiting upon completion...');\n    response_status = oauth.request(\"GET\", generate_url(request_id)).json()['status']\n    print(f\"Request {request_id} {response_status}\")\n    time.sleep(1)","key":"osqbfiwmfN"},{"type":"output","id":"4VilzC4saE6QXOkiuT90h","data":[{"name":"stdout","output_type":"stream","text":"Waiting upon completion...\nRequest 099dbe74-4d38-444a-92ad-0734b817cbcc DONE\nCPU times: user 1.13 s, sys: 117 ms, total: 1.25 s\nWall time: 2min 48s\n"}],"key":"aW8OiDpMJl"}],"key":"lHh1mHtVjg"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"tiles = oauth.request('GET', generate_url(request_id, 'tiles')).json()['member']\ncosts = sum([t['cost'] for t in tiles])\nprint(f'Processing Costs: {costs:.2f} Processing Units')","key":"a7HHbaKlyR"},{"type":"output","id":"cvYGK7UZVZCOWFIOguwJl","data":[{"name":"stdout","output_type":"stream","text":"Processing Costs: 21.28 Processing Units\n"}],"key":"K8a7z8V0SB"}],"key":"mobSeQsLXX"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"s3 = boto3.resource('s3')\nbk = s3.Bucket(bucket_name)\nprint(\"Data Cube Size: {:.2f} MiB\"\n      .format(sum([obj.size for obj in bk.objects.all().filter(Prefix=request_id)])/2**20)) # total size in bytes","key":"bx54u2syBm"},{"type":"output","id":"GwzbMdSgk0kYVvwmJu-kA","data":[{"name":"stdout","output_type":"stream","text":"Data Cube Size: 5.90 MiB\n"}],"key":"y6eUHJWpMU"}],"key":"osPY29SvZA"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"%%capture\n# Save metadata to bucket\nbk.put_object(Key=request_id + '/userdata.json', Body=json.dumps({\n    'bands': output_bands,\n    'request_id': request_id,\n    'tiles': [tile['id'] for tile in tiles],\n    'time': avg_times    \n}))","key":"NgVJdAGjBT"},{"type":"output","id":"N6joR4xN4oXAaOLUDzrFs","data":[],"key":"BEb4PybYld"}],"key":"bXXrUs6LLH"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Access Data Cube","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"JF9gjWqHA6"}],"identifier":"access-data-cube","label":"Access Data Cube","html_id":"access-data-cube","implicit":true,"key":"iNUJNFb3PH"}],"key":"i88Pjh6I9p"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Load metadata\nuserdata_obj = bk.Object(f'{request_id}/userdata.json')\nfile_stream = io.BytesIO()\nuserdata_obj.download_fileobj(file_stream) # load userdata.json into file_stream\nuserdata = json.loads(file_stream.getvalue())\nuserdata","key":"TZjURS1sEI"},{"type":"output","id":"xLsSRwi7P3h90kLO2lBdv","data":[{"output_type":"execute_result","execution_count":15,"metadata":{},"data":{"text/plain":{"content":"{'bands': ['B03', 'B04', 'B05', 'B08', 'NDVI', 'NDWI', 'CVI'],\n 'request_id': '099dbe74-4d38-444a-92ad-0734b817cbcc',\n 'tiles': [10724],\n 'time': ['2018-07-08T11:59:59.500000',\n  '2018-07-23T23:59:59.500000',\n  '2018-08-08T11:59:59.500000',\n  '2018-08-23T23:59:59.500000',\n  '2018-09-08T11:59:59.500000']}","content_type":"text/plain"}}}],"key":"Rq0n3Ro6Ml"}],"key":"lY0fJSMnzU"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Load data cube into xarray Dataset\ndss = []\nfor t in userdata['tiles']:\n    arrs = {b: xr.open_rasterio(f's3://{bucket_name}/{request_id}/{t}/{b}.tif') for b in userdata['bands']}\n    dss.append(xr.Dataset(arrs))\nds = xr.combine_by_coords(dss)\n\n# Describe xarray Dataset with metadata\nds = ds.rename({'band': 'time', 'y': 'lat', 'x': 'lon'})\nds.coords['time'] = [np.datetime64(t) for t in userdata['time']]\nds","key":"Kz5lhhx710"},{"type":"output","id":"7dzUP0zYiZkug342zkbba","data":[{"output_type":"execute_result","execution_count":16,"metadata":{},"data":{"text/html":{"content":"<pre>&lt;xarray.Dataset&gt;\nDimensions:  (lat: 334, lon: 334, time: 5)\nCoordinates:\n  * time     (time) datetime64[ns] 2018-07-08T11:59:59.500000 ... 2018-09-08T11:59:59.500000\n  * lat      (lat) float64 5.3e+06 5.3e+06 5.3e+06 ... 5.28e+06 5.28e+06\n  * lon      (lon) float64 6e+05 6.001e+05 6.002e+05 ... 6.2e+05 6.2e+05\nData variables:\n    B03      (time, lat, lon) uint16 ...\n    B04      (time, lat, lon) uint16 ...\n    B05      (time, lat, lon) uint16 ...\n    B08      (time, lat, lon) uint16 ...\n    NDVI     (time, lat, lon) uint16 ...\n    NDWI     (time, lat, lon) uint16 ...\n    CVI      (time, lat, lon) float32 ...</pre>","content_type":"text/html"},"text/plain":{"content":"<xarray.Dataset>\nDimensions:  (lat: 334, lon: 334, time: 5)\nCoordinates:\n  * time     (time) datetime64[ns] 2018-07-08T11:59:59.500000 ... 2018-09-08T11:59:59.500000\n  * lat      (lat) float64 5.3e+06 5.3e+06 5.3e+06 ... 5.28e+06 5.28e+06\n  * lon      (lon) float64 6e+05 6.001e+05 6.002e+05 ... 6.2e+05 6.2e+05\nData variables:\n    B03      (time, lat, lon) uint16 ...\n    B04      (time, lat, lon) uint16 ...\n    B05      (time, lat, lon) uint16 ...\n    B08      (time, lat, lon) uint16 ...\n    NDVI     (time, lat, lon) uint16 ...\n    NDWI     (time, lat, lon) uint16 ...\n    CVI      (time, lat, lon) float32 ...","content_type":"text/plain"}}}],"key":"sM5z29HrgU"}],"key":"rEJuI7ztke"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"def scale_index(val, src=(0,2**16-1), dst=(-1,+1)): \n    \"\"\"\n    Scale the given value from the scale of src to the scale of dst.\n    \"\"\"\n    return ((val - src[0]) / (src[1]-src[0])) * (dst[1]-dst[0]) + dst[0]\n\nscale_index(ds.isel(lat=2, lon=2).NDVI).plot.line('b-o')","key":"moJXXU5TWF"},{"type":"output","id":"POdXfV-v0zaEG_-JWPoi-","data":[{"name":"stderr","output_type":"stream","text":"/opt/conda/lib/python3.7/site-packages/pandas/plotting/_matplotlib/converter.py:103: FutureWarning: Using an implicitly registered datetime converter for a matplotlib plotting method. The converter was registered by pandas on import. Future versions of pandas will require you to explicitly register matplotlib converters.\n\nTo register the converters:\n\t>>> from pandas.plotting import register_matplotlib_converters\n\t>>> register_matplotlib_converters()\n  warnings.warn(msg, FutureWarning)\n"},{"output_type":"display_data","metadata":{"needs_background":"light"},"data":{"image/png":{"content_type":"image/png","hash":"2a76fa1d1723f8951fe6017e0a77e363","path":"/example-viewer/build/2a76fa1d1723f8951fe6017e0a77e363.png"},"text/plain":{"content":"<Figure size 432x288 with 1 Axes>","content_type":"text/plain"}}}],"key":"xIkZyHKYFp"}],"key":"h3eCcqSDO4"}],"key":"tT9HKwRQzG"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Generating Zarr data cubes with Sentinel Hub Batch API","url":"/external-notebooks/eurodatacube/notebooks/notebooks/contributions/batch-zarr-output","group":"Contributions"},"next":{"title":"Cmems Data Download","url":"/external-notebooks/eurodatacube/notebooks/notebooks/contributions/cmems-data-download","group":"Contributions"}}},"domain":"http://localhost:3000"}