{"version":1,"kind":"Notebook","sha256":"a4605ec1fea4c6b16f74b28f8c517b86cf3abd201291ec177e65408b66995259","slug":"external-notebooks.eurodatacube.notebooks.notebooks.contributions.howtolulc-batch-updated-210621","location":"/external_notebooks/eurodatacube/notebooks/notebooks/contributions/HowToLULC_batch_updated_210621.ipynb","dependencies":[],"frontmatter":{"title":"How To: Land-Use-Land-Cover Prediction for Slovenia - using the Batch Processing API","content_includes_title":false,"kernelspec":{"name":"edc","display_name":"EDC 2022.02 (Python3)","language":"python"},"github":"https://github.com/esa-earthcode/example-viewer/","subject":"EarthCODE Examples","numbering":{"title":{"offset":5}},"edit_url":"https://github.com/esa-earthcode/example-viewer//blob/main/external_notebooks/eurodatacube/notebooks/notebooks/contributions/HowToLULC_batch_updated_210621.ipynb","exports":[{"format":"ipynb","filename":"HowToLULC_batch_updated_210621.ipynb","url":"/example-viewer/build/HowToLULC_batch_upda-b7c16d14c7139b415375488ae17bd7b6.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"This notebook is based on the ","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"k1XjvnPRDo"},{"type":"link","url":"https://eo-learn.readthedocs.io/en/latest/examples/land-cover-map/SI_LULC_pipeline.html","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Land-User-Land-Cover Prediction example","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"sxDHPYTtTt"}],"urlSource":"https://eo-learn.readthedocs.io/en/latest/examples/land-cover-map/SI_LULC_pipeline.html","key":"UICutncRsJ"},{"type":"text","value":" described in the ","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"kmaPqZ0Lnh"},{"type":"link","url":"https://eo-learn.readthedocs.io/en/latest/index.html","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"EOLearn documentation","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"rp5rlqOBSe"}],"urlSource":"https://eo-learn.readthedocs.io/en/latest/index.html","key":"U2YdABA3Co"},{"type":"text","value":". The example workflow uses ","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"Yvjr8UH2Af"},{"type":"inlineCode","value":"EOLearn","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"btAGufYPk8"},{"type":"text","value":" to construct a machine learning pipeline for predicting the land use / land cover for the region of the Republic of Slovenia. The import of satellite images to train a model which is then used for the predictions is performed using an ","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"Oyne1klxGr"},{"type":"link","url":"https://eo-learn.readthedocs.io/en/latest/eotasks.html","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"EOTask","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"TnHwYfBNYv"}],"urlSource":"https://eo-learn.readthedocs.io/en/latest/eotasks.html","key":"GN4CjmTOdc"},{"type":"text","value":" based on Sentinel Hub’s ","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"wV5TV0bUcy"},{"type":"link","url":"https://docs.sentinel-hub.com/api/latest/api/process/","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"process API","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"H8f84mQkpb"}],"urlSource":"https://docs.sentinel-hub.com/api/latest/api/process/","key":"brzbwq7BRs"},{"type":"text","value":". While this approach is efficient for most applications, querying large volumes of data and performing the processing steps locally can complicate scaling to larger areas (country or continent-wide analysis for example).","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"qyCcvaqCce"}],"key":"yhPKZjAgJc"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"In this notebook, we present an alternative workflow, where the acquisition of the satellite data, processing of derived products and resampling over a fixed timestep is performed with Sentinel Hub services. The process allows for much faster processing times over large areas, reduced costs and the user needs less computational resources to process the data.","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"ZKBarrUY8K"}],"key":"k7VICX2Gh5"}],"key":"vsVNL9A4uS"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Before you start","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"GfjKOEFVXy"}],"identifier":"before-you-start","label":"Before you start","html_id":"before-you-start","implicit":true,"key":"wtl7dwI2rU"},{"type":"heading","depth":5,"position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Requirements","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"OgTA6nND24"}],"identifier":"requirements","label":"Requirements","html_id":"requirements","implicit":true,"key":"ALAtQZS3Gc"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"In order to run the example you will need an EDC Sentinel Hub API access (Enterprise plan) to access satellite data and an ","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"Ld7tHQ2SPi"},{"type":"link","url":"https://aws.amazon.com/s3/","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Amazon Bucket","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"bfvzGYDw5Z"}],"urlSource":"https://aws.amazon.com/s3/","key":"PpP2aMlhFe"},{"type":"text","value":" to save the outputs to.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"JVDwpFCkKp"}],"key":"mu7Ft6oeGp"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"To configure the notebook to work with your Sentinel Hub account you can use the ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"cjIFn8Z2zW"},{"type":"inlineCode","value":"edc","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"pcvd5bY6Nq"},{"type":"text","value":" configurator as shown below. You will also need to specify your Amazon Bucket access credentials (user id and secret for ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"I9NWbzIGCk"},{"type":"link","url":"https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"programmatic access","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"MPNjpb7CP1"}],"urlSource":"https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys","key":"MwmqY9jgyf"},{"type":"text","value":").","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"chlahLLkqY"}],"key":"fo9dXkwUsz"},{"type":"paragraph","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"strong","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Note: You may need to update the ","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"Zn0Z6myiKG"},{"type":"inlineCode","value":"eolearn","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"h21QU5fwbM"},{"type":"text","value":" and ","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"g2UBlTCuNv"},{"type":"inlineCode","value":"sentinelhub","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"lx1qnHoSJT"},{"type":"text","value":" package to the latest version.","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"FstIFyPLbb"}],"key":"dPnmt8NbvK"}],"key":"Fz6XGAQQwO"}],"key":"g6m0K1oexU"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":5,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Input data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"V35MMPBSm0"}],"identifier":"input-data","label":"Input data","html_id":"input-data","implicit":true,"key":"hPW35vcugt"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"You can access the example input data from the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"z7VawkFFXb"},{"type":"link","url":"https://github.com/sentinel-hub/eo-learn/tree/master/examples/batch-processing/data","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Github repository","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ObJFXblnrF"}],"urlSource":"https://github.com/sentinel-hub/eo-learn/tree/master/examples/batch-processing/data","error":true,"key":"OcnAhaJOcA"}],"key":"QgUHj1Q8X9"}],"key":"JNGJO5nVdP"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Overview","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"kSZDprUZIo"}],"identifier":"overview","label":"Overview","html_id":"overview","implicit":true,"key":"fKqmAMbCKq"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"This notebook is organised in 2 main sections:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"A6Lm314X0m"}],"key":"o9Z7lvPP6q"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":5,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"strong","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Part 1","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"NDMwfsoMTQ"}],"key":"MWk8Sng1zh"},{"type":"text","value":" is dedicated to creating and running the Batch Process with ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"DZN4OuDO9p"},{"type":"link","url":"https://sentinelhub-py.readthedocs.io/en/latest/","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Sentinel Hub Python package","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"T0ipAIuI5s"}],"urlSource":"https://sentinelhub-py.readthedocs.io/en/latest/","key":"vqpb46Qyh5"},{"type":"text","value":".","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"b5xVkmSA53"}],"key":"og7QXkO5ho"}],"key":"HpC6aYUS84"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"strong","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Part 2","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"KTKJZ8iiuQ"}],"key":"M7P5U7MYp6"},{"type":"text","value":" focusses on converting the results obtained in ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"JqiOdjsDos"},{"type":"emphasis","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Part 1","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"LEQNF6VSrl"}],"key":"xmtcguKNVn"},{"type":"text","value":" to ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"SrHI8hFuMm"},{"type":"link","url":"https://eo-learn.readthedocs.io/en/latest/examples/core/CoreOverview.html#EOPatch","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"EOPatches","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"rvzJeLbR5E"}],"urlSource":"https://eo-learn.readthedocs.io/en/latest/examples/core/CoreOverview.html#EOPatch","key":"Dag6VRZS2w"},{"type":"text","value":", the format used in ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"RqyDjHewWb"},{"type":"link","url":"https://eo-learn.readthedocs.io/en/latest/index.html","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"EOLearn","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"tTtZuRdUeL"}],"urlSource":"https://eo-learn.readthedocs.io/en/latest/index.html","key":"MFDxyqrMpH"},{"type":"text","value":".","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"HSPbbyMWIC"}],"key":"eWrkdDk7lB"}],"key":"MakLgV8Dkx"},{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"strong","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Part 3","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"ATHEcq2dmV"}],"key":"l5Vh9c8BMe"},{"type":"text","value":" shows how to integrate the workflow into the ","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"ytjp8MVaKd"},{"type":"link","url":"https://github.com/sentinel-hub/eo-learn/blob/master/examples/land-cover-map/SI_LULC_pipeline.ipynb","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"LULC pipeline","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"yMuo442zuO"}],"urlSource":"https://github.com/sentinel-hub/eo-learn/blob/master/examples/land-cover-map/SI_LULC_pipeline.ipynb","data":{"kind":"file","org":"sentinel-hub","repo":"eo-learn","reference":"master","file":"examples/land-cover-map/SI_LULC_pipeline.ipynb","raw":"https://raw.githubusercontent.com/sentinel-hub/eo-learn/master/examples/land-cover-map/SI_LULC_pipeline.ipynb"},"internal":false,"protocol":"github","key":"Pyws85gGMt"},{"type":"text","value":" to predict LULC using machine learning algorithms.","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"woRr6jbLM0"}],"key":"BF787bWIXv"}],"key":"MQxsG1mfqD"}],"key":"tVpAC56jSY"},{"type":"paragraph","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Let’s start!","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"k23fKaAIPL"}],"key":"HF7VuvX6ZQ"}],"key":"Z1v7fP6uqg"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Basics of Python data handling and visualization\nimport numpy as np\nimport geopandas as gpd\nfrom shapely.geometry import Polygon\nfrom shapely.wkt import loads\nimport rasterio\n\n# Sentinel Hub\nfrom sentinelhub import (SentinelHubBatch, SentinelHubRequest, Geometry, CRS, BBox, DataCollection, MimeType, SHConfig,\n                         BatchSplitter)\n\n# EOLearn\nfrom eolearn.core import (EOPatch, EONode, EOWorkflow, EOExecutor, OverwritePermission, FeatureType, SaveTask, LoadTask,\n                          linearly_connect_tasks)\nfrom eolearn.geometry import VectorToRasterTask, ErosionTask\nfrom eolearn.ml_tools import FractionSamplingTask\n\n# Amazon\nimport boto3\n\n# Utilities\nfrom pathlib import Path, PosixPath\nimport datetime\nfrom tqdm.auto import tqdm\nfrom fs_s3fs import S3FS\nfrom fs import open_fs\nfrom aenum import MultiValueEnum\nfrom time import sleep\n\n# Visualisation\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import ListedColormap, BoundaryNorm\nfrom matplotlib.patches import Patch\n\nimport os\nimport warnings\nwarnings.filterwarnings('ignore')","key":"tsR5yxH7lY"},{"type":"output","id":"p7239KKT5PgpcFDvsEtDl","data":[],"key":"jn1s2C7Nke"}],"key":"m3ccHcBYfX"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"%matplotlib inline","key":"a2xpJPOy0K"},{"type":"output","id":"7fYx2IWISoZ90plmXwtiA","data":[],"key":"k2xST61HFG"}],"key":"EaqZLi4ps0"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Part 1: create and run the Batch process","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"RYcvTH25Wu"}],"identifier":"part-1-create-and-run-the-batch-process","label":"Part 1: create and run the Batch process","html_id":"part-1-create-and-run-the-batch-process","implicit":true,"key":"LLMz4zfm2F"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Run ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"eEuCgjY1qt"},{"type":"inlineCode","value":"Sentinel Hub Batch Processing","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"rYNsTWib3q"},{"type":"text","value":" to request data for an area of interest, and download the satellite products (bands and derived products) to an Amazon S3 Bucket.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"HbWA8Iq28a"}],"key":"snZEXmoOW0"}],"key":"WLTCT5LP2Y"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"First specify Amazon S3 bucket client ID and secret (See ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"a4Wcjyg3Nv"},{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Requirements","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"hx1JtEcNyG"}],"key":"ol8vBAMICQ"},{"type":"text","value":" above)","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"bAStZl3aHa"}],"key":"oQWmAvAj20"}],"key":"qivg1prUKI"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"AWS_ID = \"aws-client-id\"\nAWS_SECRET = \"aws-client-secret\"","key":"J6RoTVD5I9"},{"type":"output","id":"wvtrBT_RGrK6nBnPKWEqU","data":[],"key":"janlvft5dR"}],"key":"tw11VVpuN8"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":4,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Sentinel Hub authentification","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Jym05Axp35"}],"identifier":"sentinel-hub-authentification","label":"Sentinel Hub authentification","html_id":"sentinel-hub-authentification","implicit":true,"key":"SV9GrJHyX3"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"In the following cell, we will create an instance of ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ucGRLtC1tx"},{"type":"inlineCode","value":"sentinelhub.SHConfig","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"K4FnaRoZVK"},{"type":"text","value":" for the Sentinel Hub services. The token is only valid for 1 hour. If you get an message of type ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"aiwbZyEoka"},{"type":"inlineCode","value":" accessToken signature expired","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"WxdExQLiSq"},{"type":"text","value":" later in the workflow, just re-run the next cell. See more ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"c6tfvIDCvD"},{"type":"link","url":"https://docs.sentinel-hub.com/api/latest/api/overview/authentication/","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"information here","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"EN1xnGKP78"}],"urlSource":"https://docs.sentinel-hub.com/api/latest/api/overview/authentication/","key":"nuJjAFUDTw"}],"key":"X5qds4OH20"}],"key":"AvrHASSZd1"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Set up credentials for use with batch\nconfig = SHConfig()\nconfig.sh_client_id = os.environ[\"SH_CLIENT_ID\"]\nconfig.sh_client_secret = os.environ[\"SH_CLIENT_SECRET\"]\n\nif config.sh_client_id == '' or config.sh_client_secret == '':\n    print(\"Warning! To use Sentinel Hub services, please provide the credentials (client ID and client secret).\")","key":"r66skOZ8MG"},{"type":"output","id":"xVon_bW7EeruyTBwHLSwV","data":[],"key":"U7BEpAUTsh"}],"key":"c93MpXP3F8"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"1.1 Define the Area-of-Interest (AOI):","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"qhjIES4mkS"}],"identifier":"id-1-1-define-the-area-of-interest-aoi","label":"1.1 Define the Area-of-Interest (AOI):","html_id":"id-1-1-define-the-area-of-interest-aoi","implicit":true,"key":"qI9Dj9tfUY"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Although the Sentinel Hub Batch processing is designed for large areas, running this example Notebook for the entire Republic of Slovenia would be costly (in terms of storage and processing units used). To make the example reproducible, we will run the example for a smaller region: the administrative boundaries of the capital, Ljubljana.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"JSqZkMrdZp"}],"key":"pDONR1awFE"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":6,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"A geographical shape of Slovenia was taken from ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"qsxZ4wBpj2"},{"type":"link","url":"http://alas.matf.bg.ac.rs/~mi09109/svn.html","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"this webpage","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"cspcz4MlMP"}],"urlSource":"http://alas.matf.bg.ac.rs/~mi09109/svn.html","key":"QJfEisn4sW"},{"type":"text","value":". The region of Ljubljana was extracted using QGIS and saved as a new geojson. In the following cell the ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"BNLi5gw7i5"},{"type":"inlineCode","value":"geojson","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"qP5R5GnnEu"},{"type":"text","value":" is imported and a buffer of 500 m is applied to it (to make sure to cover the entire extent). The shape ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"no0zccc4Es"},{"type":"inlineCode","value":"svn_border.geojson","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"VEmzou6K1M"},{"type":"text","value":" is available ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"oJnDmz4VT1"},{"type":"link","url":"https://github.com/sentinel-hub/eo-learn/blob/master/examples/batch-processing/data/ljubljana.geojson","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"here","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"OU9BVLOcI4"}],"urlSource":"https://github.com/sentinel-hub/eo-learn/blob/master/examples/batch-processing/data/ljubljana.geojson","data":{"kind":"file","org":"sentinel-hub","repo":"eo-learn","reference":"master","file":"examples/batch-processing/data/ljubljana.geojson","raw":"https://raw.githubusercontent.com/sentinel-hub/eo-learn/master/examples/batch-processing/data/ljubljana.geojson"},"internal":false,"protocol":"github","key":"J3YWEEKzaz"},{"type":"text","value":".","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"hyGOR6AtyP"}],"key":"SfGE8zhvhl"}],"key":"H6cqfaL4tp"},{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Because the Batch Processing API can’t process shapes with too many coordinates (up to 1500 points are supported), a simplified polygon covering the extent of the geographical shape is created (using ","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"lnTkkdc2zZ"},{"type":"inlineCode","value":"simplify","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"WnQQ6rOOFS"},{"type":"text","value":"), and the coordinates extracted. In the current example, this step is optional, but was included for demonstration purposes.","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"wGyHueGlwB"}],"key":"RbKA9K2ahT"}],"key":"YyKVEUqLha"},{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"The shape is split into smaller tiles by the batch process (see further down).","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"DXr31Ww4sg"}],"key":"oP5vyzttCu"}],"key":"GtQGJlynoD"}],"key":"B2ww1g9GQ8"}],"key":"EdnezaXM5L"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":5,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"1.1.1 Import data, plot AOI, and check the points count","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"iDWXLFxb66"}],"identifier":"id-1-1-1-import-data-plot-aoi-and-check-the-points-count","label":"1.1.1 Import data, plot AOI, and check the points count","html_id":"id-1-1-1-import-data-plot-aoi-and-check-the-points-count","implicit":true,"key":"x0ikCySZp5"}],"key":"JnTRYoSsAK"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"ljubljana_data = {\n    \"adm1_code\": \"SVN-962\",\n    \"Shape_Leng\": 1.01284310866,\n    \"Shape_Area\": 0.0321361298149,\n    \"diss_me\": 962,\n    \"adm1_code_\": \"SVN-962\",\n    \"iso_3166_2\": \"SI-\",\n    \"wikipedia\": None,\n    \"sr_sov_a3\": \"SVN\",\n    \"sr_adm0_a3\": \"SVN\",\n    \"iso_a2\": \"SI\",\n    \"adm0_sr\": 1,\n    \"admin0_lab\": 2,\n    \"name\": \"Osrednjeslovenska\",\n    \"name_alt\": \"Ljubljana\",\n    \"name_local\": None,\n    \"type\": \"Statisticna Regije\",\n    \"type_en\": \"Statistical Region\",\n    \"code_local\": None,\n    \"code_hasc\": \"SI.LJ\",\n    \"note\": None,\n    \"hasc_maybe\": None,\n    \"region\": None,\n    \"region_cod\": None,\n    \"region_big\": None,\n    \"big_code\": None,\n    \"provnum_ne\": 111,\n    \"gadm_level\": 2,\n    \"check_me\": 0,\n    \"scalerank\": 10,\n    \"datarank\": 8,\n    \"abbrev\": None,\n    \"postal\": \"LJ\",\n    \"area_sqkm\": 0.0,\n    \"sameascity\": -99,\n    \"labelrank\": 10,\n    \"featurecla\": \"Admin-1 scale rank\",\n    \"admin\": \"Slovenia\",\n    \"name_len\": 17,\n    \"mapcolor9\": 2,\n    \"mapcolor13\": 12,\n    \"geometry\": loads(\"POLYGON ((926425.6431983189 5123589.170469966, 928023.7898916167 5121898.015502713, 930381.3263176056 5121120.044066284, 932172.4018085758 5120986.554265775, 932397.4164062712 5120015.896563099, 932581.6593906969 5119111.593260468, 934172.9482895343 5118295.244651059, 935552.5077836656 5118035.394490954, 937426.0230920448 5118284.182013701, 938974.6457346278 5118919.953589984, 939436.4214525614 5118863.607289625, 940115.1034137213 5118470.883597136, 941661.5894687981 5118743.682363604, 942560.1680774961 5118144.887344502, 942735.089611518 5117724.728520735, 943609.3171581865 5117355.118745014, 943441.7280510126 5116506.263347512, 943476.1717744432 5116029.795751704, 943357.5915462442 5115669.221437243, 943883.7408222458 5115060.955142928, 944401.2580603813 5114573.278955945, 944833.0906094413 5113938.04334936, 945085.8948330702 5113278.305480363, 944854.481928225 5112644.071482883, 945156.6899264865 5110470.215581522, 944463.2053827948 5109883.358539728, 943213.6218703112 5110424.993391757, 942450.1435025067 5110975.866591577, 942002.8597709246 5111157.176478082, 941344.5252792852 5111086.772156567, 940250.6079617536 5110362.048641361, 939987.9768291702 5109818.169601077, 939577.3549704123 5109318.540062902, 938375.9969106899 5108514.419667248, 936051.6183637844 5108285.692598732, 934876.7259672079 5109033.28003256, 932469.7213315063 5110954.777737652, 930583.1400775139 5111205.907107501, 928967.0312091864 5110810.191967965, 928500.3034628865 5110414.20558999, 928620.5574546311 5109381.365577888, 928509.1394418445 5107865.126862759, 926900.3871498384 5108624.263870159, 926099.3870347773 5108522.555558871, 924410.7564367288 5107768.401844963, 923998.0565383206 5106756.500797831, 921805.3913033886 5105602.201608885, 921016.5103012786 5106199.915835703, 921000.6721904315 5106960.150802306, 921510.2298354742 5107796.748059389, 922130.4894534599 5108482.394295073, 922543.3747806235 5109142.328402843, 922331.4077197406 5109594.952222921, 921330.1897642646 5110247.196747772, 920127.357732374 5111618.263417895, 920919.0829407133 5112200.206929425, 920960.7590644892 5112471.259680815, 920960.1393605953 5113007.610408505, 920817.7315732187 5114030.260011839, 920568.43797675 5114679.336590691, 920342.5783931809 5115162.761556501, 920144.6578527923 5115414.51555307, 919381.6598506232 5117060.85083882, 919108.5832219544 5117356.510004638, 918652.2145139208 5117515.658383243, 918148.0906285422 5117492.790082054, 919763.7540312987 5118866.304184149, 920148.1329041517 5119054.139046485, 920302.0922611563 5119266.565990494, 920048.0836169412 5119635.582898952, 919720.6514727444 5120022.646377376, 919448.8270490387 5120476.973462088, 919145.8071278529 5121211.784814458, 918820.2671607826 5121397.144247358, 918838.9195219886 5121652.192733762, 918920.7809071594 5122038.452927704, 919230.1471832383 5122440.292463314, 919706.9407822394 5122680.600692804, 920717.1690435053 5122744.185280813, 921763.7085836534 5123444.913719906, 922373.4495737455 5124545.402263708, 922960.0301947873 5124063.914497981, 923791.9073106179 5124210.8840452, 925808.8960918575 5125017.186416848, 926425.6431983189 5123589.170469966))\")\n}","key":"yiusVtV9T8"},{"type":"output","id":"mkQhYWTnPHloH_TOTE5BG","data":[],"key":"f0yHvVkQZp"}],"key":"vli50tqcin"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Folder where data for running the notebook is stored\nINPUT_DATA = Path(\"./data/\") \n\n# Load geojson file\n# country = gpd.read_file(INPUT_DATA.joinpath('ljubljana.geojson'))\ncountry = gpd.GeoDataFrame(ljubljana_data, crs=\"EPSG:32632\", index=[0])\n\n# Apply a 500m buffer to the shape (indicate a specific feature with [i])\ncountry_buffer = country[country.geometry.name][0].buffer(500)\n\n# Get the country's shape in polygon format\ncountry_shape = country.geometry.values[-1]\n\n# Plot country\ncountry.plot()\nplt.axis('off')\n\n# Print size and points count\nprint('Dimension of the area is {0:.0f} x {1:.0f} m2'.format(country_shape.bounds[2] - country_shape.bounds[0],\n                                                             country_shape.bounds[3] - country_shape.bounds[1]))\nprint('Points count after buffer: ', len(list(country_buffer.exterior.coords)))","key":"yrJKjR4B6C"},{"type":"output","id":"WZ46-G46SYLhGkqztBh65","data":[{"name":"stdout","output_type":"stream","text":"Dimension of the area is 27009 x 19415 m2\nPoints count after buffer:  362\n"},{"output_type":"display_data","metadata":{"needs_background":"light"},"data":{"image/png":{"content_type":"image/png","hash":"655ccbe901a08c7d831bcb813e8ed402","path":"/example-viewer/build/655ccbe901a08c7d831bcb813e8ed402.png"},"text/plain":{"content":"<Figure size 432x288 with 1 Axes>","content_type":"text/plain"}}}],"key":"xTVlwcD5gK"}],"key":"GHhBJVDtId"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":5,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"1.1.2 Get simplified bands and plot geographical extent  that will be used in requests","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"IjAr0YYfEz"}],"identifier":"id-1-1-2-get-simplified-bands-and-plot-geographical-extent-that-will-be-used-in-requests","label":"1.1.2 Get simplified bands and plot geographical extent  that will be used in requests","html_id":"id-1-1-2-get-simplified-bands-and-plot-geographical-extent-that-will-be-used-in-requests","implicit":true,"key":"wPtzslCHb2"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"strong","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Note","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"zbEZoXof5j"}],"key":"uoO4tmpzdQ"},{"type":"text","value":": Make sure the points count does not exceed 1500 points after simplification.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"LaAYaqjJXy"}],"key":"S1GLFhCHxo"}],"key":"tgwDX40bEA"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Get the simplified shape of the country\ncountry_sim = country_buffer.simplify(100) #unit in meter\n\n# Check the amount of points forming the polygon\nprint('Points count: ',len(list(country_sim.exterior.coords)))\n\n# Plot shape\nplt.figure()\nplt.axis('off')\nplt.plot(*country_sim.exterior.xy)\nplt.show()","key":"pn2U2JiARe"},{"type":"output","id":"ud5mTJqLpLX8vCTPQIDJt","data":[{"name":"stdout","output_type":"stream","text":"Points count:  72\n"},{"output_type":"display_data","metadata":{"needs_background":"light"},"data":{"image/png":{"content_type":"image/png","hash":"0fcfc48474171a698b9850a2871dd71e","path":"/example-viewer/build/0fcfc48474171a698b9850a2871dd71e.png"},"text/plain":{"content":"<Figure size 432x288 with 1 Axes>","content_type":"text/plain"}}}],"key":"idLZDK2F7K"}],"key":"Fy7zUYxoBo"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"1.2 Use Batch to fetch Sentinel-2 data and resample to even timesteps","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"OnmqcyTAwH"}],"identifier":"id-1-2-use-batch-to-fetch-sentinel-2-data-and-resample-to-even-timesteps","label":"1.2 Use Batch to fetch Sentinel-2 data and resample to even timesteps","html_id":"id-1-2-use-batch-to-fetch-sentinel-2-data-and-resample-to-even-timesteps","implicit":true,"key":"dzK4hsSARE"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Now that the area of interest is defined, we will set up the parameters necessary to run the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"UhUZ04XQYi"},{"type":"inlineCode","value":"Batch","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"JNLK5xwjV4"},{"type":"text","value":" process, and go through the different steps to acquire the data.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"wN91LHfkA2"}],"key":"HxKgO2cBWB"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"We will collect Sentinel-2 data and retrieve the following products:","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"gITsbupKuF"}],"key":"n5hh81eVkM"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":7,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"L1C custom list of bands [B02, B03, B04, B08, B11, B12], which corresponds to [B, G, R, NIR, SWIR1, SWIR2] wavelengths.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"XUBbcU7GOD"}],"key":"ouU6o8Vc0F"}],"key":"x0CAH8vkEy"},{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Calculated NDVI, NDWI, and NDBI information","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"o1axk089dt"}],"key":"J6OLvP9pXa"}],"key":"DWSlyrTr77"},{"type":"listItem","spread":true,"position":{"start":{"line":11,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"A mask of validity, based on acquired data from Sentinel and cloud coverage. Valid pixel is if:","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"v5N3pOJyJZ"}],"key":"NQXurH0Vao"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":12,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"IS_DATA == True","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"Z5PniNkmSM"}],"key":"lrRJndd0X0"},{"type":"listItem","spread":true,"position":{"start":{"line":13,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"CLOUD_MASK == 0 (1 indicates cloudy pixels and 255 indicates ","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"PO7lZ35Mot"},{"type":"inlineCode","value":"NO_DATA","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"vaKIjdYT7l"},{"type":"text","value":")","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"K4Q7PoqpRB"}],"key":"R6Xt0n8DPi"}],"key":"RgJKrzYD2Q"}],"key":"wXJCRlnsPp"}],"key":"GFDjBtE90b"},{"type":"paragraph","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"All returned products will be returned for specific time intervals between 2 dates. If no data is present on the interval date, the service returns a linear interpolation between the previous and following valid data. The ","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"tJ2q9oBR3Q"},{"type":"inlineCode","value":"Batch","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"T0uqO6o28U"},{"type":"text","value":" request merges the ","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"PJnwkUKukR"},{"type":"link","url":"https://eo-learn.readthedocs.io/en/latest/examples/land-cover-map/SI_LULC_pipeline.html#Define-the-workflow","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"EOLearn data download step","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"zPYwsHYQSw"}],"urlSource":"https://eo-learn.readthedocs.io/en/latest/examples/land-cover-map/SI_LULC_pipeline.html#Define-the-workflow","key":"ar6655aTf0"},{"type":"text","value":" and ","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"CQHyPnX22s"},{"type":"link","url":"https://eo-learn.readthedocs.io/en/latest/examples/land-cover-map/SI_LULC_pipeline.html#5.-Prepare-the-training-data","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"training data preparation step","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"Z2PnW2UvUl"}],"urlSource":"https://eo-learn.readthedocs.io/en/latest/examples/land-cover-map/SI_LULC_pipeline.html#5.-Prepare-the-training-data","key":"Us2l0QQN8l"},{"type":"text","value":" into one.","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"t95TxvOHKg"}],"key":"FzeOS7dT2f"}],"key":"usX4dMPb6e"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":5,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"1.2.1 Prepare Batch input parameters","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"DT8LDK4BE8"}],"identifier":"id-1-2-1-prepare-batch-input-parameters","label":"1.2.1 Prepare Batch input parameters","html_id":"id-1-2-1-prepare-batch-input-parameters","implicit":true,"key":"pU0jlf4RZz"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Here we set the start and end date of the time interval that we want to query, as well as a time step in days for which data will be returned.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"COVFvSvzZ0"}],"key":"es1M0PbDMV"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"We also specify the name of the Amazon S3 Bucket that was created and parameterised as shown earlier.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"b5t6iS8p77"}],"key":"b1S6I6F9CZ"}],"key":"vdvZzUaEsx"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Date parameters: for this example, we will get data from early April to late October.\nSTART = datetime.date(2019, 4, 1)\nEND = datetime.date(2019, 10, 31)\n\nINTERVAL = 15  # Interval for date resampling in days\n\n# Calculate list of dates for the resampling\ndate_iterator = START\ntimestamps = []\nwhile date_iterator < END:\n    timestamps.append(date_iterator)\n    date_iterator = date_iterator + datetime.timedelta(days=INTERVAL)\n    \n# Amazon bucket name\naws_bucket_name = \"my-amazon-bucket\"","key":"rijnhf4IMn"},{"type":"output","id":"nX4rzcirwBPLruO84Qkn1","data":[],"key":"Z9osULGFyP"}],"key":"X0TRvU2GtT"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Below, we define the evalscript that will perform all the work on Sentinel Hub servers. The script fetches the images, calculates the indices (NDVI, NDWI, and NDBI), and resamples the data to the defined interval.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"dmaRe9G0Ls"}],"key":"YTHwVBUm1O"}],"key":"p3SRozhb57"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"evalscript = \"\"\"\n//VERSION=3\n\n// Calculate number of bands needed for all intervals\n// Initialise dates and interval\n// Beware: in JS months are 0 indexed\nvar start_date = new Date(2019, 3, 1, 0, 0, 0);\nvar end_date = new Date(2019, 9, 31, 0, 0, 0);\nvar sampled_dates = sample_timestamps(start_date, end_date, 15, 'day').map(d => withoutTime(d));\nvar nb_bands = sampled_dates.length;\nvar n_valid = 0;\nvar n_all = 0;\n\nfunction interval_search(x, arr) {\n  let start_idx = 0,  end_idx = arr.length - 2;\n\n  // Iterate while start not meets end\n  while (start_idx <= end_idx) {\n    // Find the mid index\n    let mid_idx = (start_idx + end_idx) >> 1;\n\n    // If element is present at mid, return True\n    if (arr[mid_idx] <= x && x < arr[mid_idx + 1]) {\n      return mid_idx;\n    }\n    // Else look in left or right half accordingly\n    else if (arr[mid_idx + 1] <= x) start_idx = mid_idx + 1;\n    else end_idx = mid_idx - 1;\n  }\n  if (x == arr[arr.length-1]){\n    return arr.length-2;\n  }\n\n  return undefined;\n}\n\nfunction linearInterpolation(x, x0, y0, x1, y1, no_data_value=NaN) {\n  if (x < x0 || x > x1) {\n    return no_data_value;\n  }\n  var a = (y1 - y0) / (x1 - x0);\n  var b = -a * x0 + y0;\n  return a * x + b;\n}\n\nfunction lininterp(x_arr, xp_arr, fp_arr, no_data_value=NaN) {\n  results = [];\n  data_mask = [];\n  xp_arr_idx = 0;\n  for(var i=0; i<x_arr.length; i++){\n    var x = x_arr[i];\n    n_all+=1;\n    interval = interval_search(x, xp_arr);\n    if (interval === undefined) {\n      data_mask.push(0);\n      results.push(no_data_value);\n      continue;\n    }\n    data_mask.push(1);\n    n_valid+=1;\n    results.push(\n      linearInterpolation(\n        x,\n        xp_arr[interval],\n        fp_arr[interval],\n        xp_arr[interval+1],\n        fp_arr[interval+1], \n        no_data_value\n      )\n    );\n  }\n\n  return [results, data_mask];\n}\n\n\nfunction interpolated_index(index_a, index_b){\n  // Calculates the index for all bands in array\n  var index_data = [];\n  for (var i = 0; i < index_a.length; i++){\n     // UINT index returned\n     let ind = (index_a[i] - index_b[i]) / (index_a[i] + index_b[i]);\n     index_data.push(ind * 10000 + 10000);\n  }\n  \n  return index_data\n}\n\n\nfunction increase(original_date, period, period_unit){\n    date = new Date(original_date)\n    switch(period_unit){\n        case 'millisecond':\n            return new Date(date.setMilliseconds(date.getMilliseconds()+period));\n        case 'second':\n            return new Date(date.setSeconds(date.getSeconds()+period));\n        case 'minute':\n            return new Date(date.setMinutes(date.getMinutes()+period));\n        case 'hour':\n            return new Date(date.setHours(date.getHours()+period));\n        case 'day':\n            return new Date(date.setDate(date.getDate()+period));\n        case 'month':\n            return new Date(date.setMonth(date.getMonth()+period));\n        default:\n            return undefined\n    }\n}\n\nfunction sample_timestamps(start, end, period, period_unit) {\n    var cDate = new Date(start);\n    var sampled_dates = []\n    while (cDate < end) {\n        sampled_dates.push(cDate);\n        cDate = increase(cDate, period, period_unit);\n    }\n    return sampled_dates;\n}\n\nfunction is_valid(smp){\n  // Check if the sample is valid (i.e. contains no clouds or snow)\n  let clm = smp.CLM;\n  let dm = smp.dataMask;\n\n  if (clm === 1 || clm === 255) {\n        return false;\n  } else if (dm !=1 ) {\n        return false;\n  } else {\n  return true;\n  }\n}\n\nfunction withoutTime(intime){\n  // Return date without time\n  intime.setHours(0, 0, 0, 0);\n  return intime;\n}\n\n\n// Sentinel Hub functions\nfunction setup() {\n  // Setup input/output parameters\n    return {\n        input: [{\n            bands: [\"B02\", \"B03\", \"B04\", \"B08\", \"B11\", \"B12\", \"CLM\", \"dataMask\"],\n            units: \"DN\"\n        }],\n      output: [\n          {id: \"B02\", bands: nb_bands, sampleType: SampleType.UINT16},\n          {id: \"B03\", bands: nb_bands, sampleType: SampleType.UINT16},\n          {id: \"B04\", bands: nb_bands, sampleType: SampleType.UINT16},\n          {id: \"B08\", bands: nb_bands, sampleType: SampleType.UINT16},\n          {id: \"B11\", bands: nb_bands, sampleType: SampleType.UINT16},\n          {id: \"B12\", bands: nb_bands, sampleType: SampleType.UINT16},\n          {id: \"NDVI\", bands: nb_bands, sampleType: SampleType.UINT16},\n          {id: \"NDWI\", bands: nb_bands, sampleType: SampleType.UINT16},\n          {id: \"NDBI\", bands: nb_bands, sampleType: SampleType.UINT16},\n          {id: \"data_mask\", bands: nb_bands, sampleType: SampleType.UINT8}\n      ],\n    mosaicking: \"ORBIT\"\n    }\n}\n\n\n// Evaluate pixels in the bands\nfunction evaluatePixel(samples, scenes) {\n  \n  // Initialise arrays\n  var valid_samples = {'B02':[], 'B03':[], 'B04':[], 'B08':[], 'B11':[], 'B12':[]}; \n  \n  var valid_dates = []\n  // Loop over samples. \n  for (var i = samples.length-1; i >= 0; i--){\n      if (is_valid(samples[i])) {\n        valid_dates.push(withoutTime(new Date(scenes[i].date)));\n        valid_samples['B02'].push(samples[i].B02);\n        valid_samples['B03'].push(samples[i].B03);\n        valid_samples['B04'].push(samples[i].B04);\n        valid_samples['B08'].push(samples[i].B08);\n        valid_samples['B11'].push(samples[i].B11);\n        valid_samples['B12'].push(samples[i].B12);\n      }\n  }\n  \n  var [b02_interpolated, b02_dm] = lininterp(sampled_dates, valid_dates, valid_samples['B02'], 0);\n  var [b03_interpolated, b03_dm] = lininterp(sampled_dates, valid_dates, valid_samples['B03'], 0);\n  var [b04_interpolated, b04_dm] = lininterp(sampled_dates, valid_dates, valid_samples['B04'], 0);\n  var [b08_interpolated, b08_dm] = lininterp(sampled_dates, valid_dates, valid_samples['B08'], 0);\n  var [b11_interpolated, b11_dm] = lininterp(sampled_dates, valid_dates, valid_samples['B11'], 0);\n  var [b12_interpolated, b12_dm] = lininterp(sampled_dates, valid_dates, valid_samples['B12'], 0);\n\n  // Calculate indices and return optimised for UINT16 format (will need unpacking)\n  var ndvi = interpolated_index(b08_interpolated, b04_interpolated);\n  var ndwi = interpolated_index(b03_interpolated, b08_interpolated);\n  var ndbi = interpolated_index(b11_interpolated, b08_interpolated);\n  \n  // Return all arrays\n  return {\n            B02: b02_interpolated,\n            B03: b03_interpolated,\n            B04: b04_interpolated,\n            B08: b08_interpolated,\n            B11: b11_interpolated,\n            B12: b12_interpolated,\n            NDVI: ndvi,\n            NDWI: ndwi,\n            NDBI: ndbi,\n            data_mask: b02_dm\n  }\n}\n\"\"\"","key":"xUu34ID0Rx"},{"type":"output","id":"coPcNIYaadRPem6gKZ5uv","data":[],"key":"FEmF4W4w2V"}],"key":"xlsQPCHSnu"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Next, we set the parameters passed to the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"YDl520cQsY"},{"type":"inlineCode","value":"SentinelHubRequest()","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ZAE9h0QMj0"},{"type":"text","value":" and the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"O6hjglj95X"},{"type":"inlineCode","value":"SentinelHubBatch()","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"nRVUaRVB4P"},{"type":"text","value":" to run the batch processing request.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"uNZzuwbUT4"}],"key":"PbpIrECsh5"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"The following parameters are specified:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"vQjDYQx9pc"}],"key":"ozVF1j6MIl"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":5,"column":1},"end":{"line":38,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"strong","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"evalscript","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"caNJJoS5eh"}],"key":"qcxqFzoRYY"},{"type":"text","value":": the evalscript that was written above.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"ng4EGU6f6n"}],"key":"wIKsORNR6m"}],"key":"PFZ8RR1yyn"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"strong","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"geometry","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"vjLpxxvjPD"}],"key":"nWKUddLCGs"},{"type":"text","value":": the geometry parameters representing the area of interest.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"sysOyiaqbS"}],"key":"M7IBDdqvCy"},{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"The input type should be ","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"gytSK0zcz6"},{"type":"inlineCode","value":"class 'shapely.geometry.polygon.Polygon'","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"ZIC6R4PtkF"},{"type":"text","value":" returned from ","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"AqhUon53dh"},{"type":"link","url":"https://geopandas.org/data_structures.html","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"the “geometry” column","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"YWWb9lmFWD"}],"urlSource":"https://geopandas.org/data_structures.html","key":"QuO2eh8M4g"},{"type":"text","value":" (","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"X4R931Wczr"},{"type":"inlineCode","value":"gdf[gdf.geometry.name][i]","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"tALtBSwF1S"},{"type":"text","value":").","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"y7ReV8UvY4"}],"key":"zrMVqxUzhf"}],"key":"H9GTGI6Exx"},{"type":"listItem","spread":true,"position":{"start":{"line":11,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"strong","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"crs","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"zxLxoeHGlu"}],"key":"h2iOLO15xU"},{"type":"text","value":": the code corresponding to the projection parameters of the input data.","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"N8ZWWk71yo"}],"key":"rJ0v1Wy8Kz"},{"type":"paragraph","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"See the ","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"TT5Hla7QvA"},{"type":"link","url":"https://sentinelhub-py.readthedocs.io/en/latest/constants.html?highlight=SentinelHub.CRS#sentinelhub.constants.CRS","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"input format","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"ayAclrxFHP"}],"urlSource":"https://sentinelhub-py.readthedocs.io/en/latest/constants.html?highlight=SentinelHub.CRS#sentinelhub.constants.CRS","key":"GYszRrYzOl"},{"type":"text","value":" of the ","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"hp97UQi2SN"},{"type":"inlineCode","value":"CRS","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"KgXCoqAT3L"},{"type":"text","value":" helper for constant or enter in the following format: ","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"uTeHvINGFt"},{"type":"inlineCode","value":"\"EPSG: 3035\"","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"o3VjCmBVgC"},{"type":"text","value":".","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"SUx4ZLPr7g"}],"key":"cJb8PRKaTP"}],"key":"OM4KNtjCCq"},{"type":"listItem","spread":true,"position":{"start":{"line":15,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"strong","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"datasource","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"UEcB2p8wLI"}],"key":"cCm0Q3QjEk"},{"type":"text","value":": the parameters for the data to query.","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"uekitXQBJJ"}],"key":"fPmBwxF6VM"},{"type":"paragraph","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"See the most commonly used ","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"K3gesge28h"},{"type":"link","url":"https://sentinelhub-py.readthedocs.io/en/latest/_modules/sentinelhub/data_collections.html#DataCollection","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"predefined datacollections","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"zLwb7CnjSL"}],"urlSource":"https://sentinelhub-py.readthedocs.io/en/latest/_modules/sentinelhub/data_collections.html#DataCollection","key":"NtTaLBzwM7"},{"type":"text","value":" or ","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"sp3sGQLVK3"},{"type":"link","url":"https://sentinelhub-py.readthedocs.io/en/latest/examples/data_collections.html?highlight=DataCollection.define#Define-a-new-data-collection","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"define a new data collection","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"wha95F1wTP"}],"urlSource":"https://sentinelhub-py.readthedocs.io/en/latest/examples/data_collections.html?highlight=DataCollection.define#Define-a-new-data-collection","key":"KULGCH4bvG"}],"key":"jj503OD6tm"}],"key":"Vuh0COE3t6"},{"type":"listItem","spread":true,"position":{"start":{"line":19,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"strong","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"text","value":"time_interval","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"zgMfiyn9Cc"}],"key":"FGZoYmZPcP"},{"type":"text","value":": the start and end dates set the time period over which to fetch the data.","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"IaRQbijAaC"}],"key":"hnPEEEgKiL"}],"key":"Utl1mfeW2u"},{"type":"listItem","spread":true,"position":{"start":{"line":21,"column":1},"end":{"line":22,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"children":[{"type":"strong","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"children":[{"type":"text","value":"mosaickingOrder","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"key":"VjVj0YGT5c"}],"key":"EFNwfNSJdm"},{"type":"text","value":": Choose from ","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"key":"KU3BnwKHHT"},{"type":"inlineCode","value":"\"mostRecent\"","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"key":"aFVI7bRO3K"},{"type":"text","value":", ","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"key":"Fyr1qHAEcC"},{"type":"inlineCode","value":"\"leastRecent\"","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"key":"alH2pvRXpV"},{"type":"text","value":", and ","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"key":"zxbZakTDEQ"},{"type":"inlineCode","value":"\"leastCC\"","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"key":"lETJtPra4X"},{"type":"text","value":" (more ","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"key":"jBb4c59bFh"},{"type":"link","url":"https://docs.sentinel-hub.com/api/latest/data/sentinel-2-l1c/#mosaickingorder","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"children":[{"type":"text","value":"info","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"key":"mLfRbKSnYW"}],"urlSource":"https://docs.sentinel-hub.com/api/latest/data/sentinel-2-l1c/#mosaickingorder","key":"teaLn4mpa6"},{"type":"text","value":").","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"key":"jsyQOFZkTp"}],"key":"wHrDqpAC3w"}],"key":"oi7V83QFXE"},{"type":"listItem","spread":true,"position":{"start":{"line":23,"column":1},"end":{"line":24,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"children":[{"type":"strong","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"children":[{"type":"text","value":"upsampling/downsampling","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"key":"OQ1JklZM6w"}],"key":"joMRZJ61eB"},{"type":"text","value":": Choose from ","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"key":"NCKZ5Cu9fW"},{"type":"inlineCode","value":"\"NEAREST\"","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"key":"P1aVDNwhOq"},{"type":"text","value":", ","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"key":"yr7HWG7Sez"},{"type":"inlineCode","value":"\"BILINEAR\"","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"key":"dtPd7aNdwB"},{"type":"text","value":", and ","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"key":"cNC4OzzLV5"},{"type":"inlineCode","value":"\"BICUBIC\"","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"key":"WoWMblSgks"},{"type":"text","value":" (","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"key":"zJDOFA92rL"},{"type":"link","url":"https://docs.sentinel-hub.com/api/latest/data/sentinel-2-l1c/#processing-options","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"children":[{"type":"text","value":"examples for Sentinel-2","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"key":"DR0RP9hFu9"}],"urlSource":"https://docs.sentinel-hub.com/api/latest/data/sentinel-2-l1c/#processing-options","key":"gstVObJ2bM"},{"type":"text","value":").","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"key":"hoQFIAcCVs"}],"key":"RSLedKXsNX"}],"key":"EDTo7qwqM9"},{"type":"listItem","spread":true,"position":{"start":{"line":25,"column":1},"end":{"line":26,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},"children":[{"type":"strong","position":{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},"children":[{"type":"text","value":"output_type","position":{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},"key":"qvrTXqNxpe"}],"key":"rxHIunNIkJ"},{"type":"text","value":": Use ","position":{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},"key":"PwgmAXHJXr"},{"type":"inlineCode","value":"MimeType","position":{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},"key":"FhiGI1lVOz"},{"type":"text","value":" to select a data type of the output response returned by the evalscript (more ","position":{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},"key":"KOXWjb73Xx"},{"type":"link","url":"https://sentinelhub-py.readthedocs.io/en/latest/_modules/sentinelhub/constants.html#MimeType","position":{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},"children":[{"type":"text","value":"info","position":{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},"key":"Log9FReR5b"}],"urlSource":"https://sentinelhub-py.readthedocs.io/en/latest/_modules/sentinelhub/constants.html#MimeType","key":"tgQNpHoxyb"},{"type":"text","value":").","position":{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},"key":"USazNhRhVM"}],"key":"PE4UHy8o4k"}],"key":"tDc2NUzySH"},{"type":"listItem","spread":true,"position":{"start":{"line":27,"column":1},"end":{"line":32,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"children":[{"type":"strong","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"children":[{"type":"text","value":"tilingGridId","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"key":"P8TsrUMOFp"}],"key":"L5NZPLqVJf"},{"type":"text","value":" and ","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"key":"w0I4Re5KVg"},{"type":"strong","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"children":[{"type":"text","value":"resolution","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"key":"GogrnKMcB9"}],"key":"hAjdTwbwRo"},{"type":"text","value":": these parameters parameters allow to set the grid and resolution of the images returned. To know which paramters to set, refer to the ","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"key":"LHxig1sCCh"},{"type":"link","url":"https://docs.sentinel-hub.com/api/latest/api/batch/#tiling-grids","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"children":[{"type":"text","value":"dedicated documentation","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"key":"CvrJdbVO7A"}],"urlSource":"https://docs.sentinel-hub.com/api/latest/api/batch/#tiling-grids","key":"uJGBtlMk0R"},{"type":"text","value":". Here we return:","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"key":"hjM2hAyjvA"}],"key":"furYxBKIoe"},{"type":"paragraph","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"children":[{"type":"inlineCode","value":"tilingGridId","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"FC1pyroA89"},{"type":"text","value":" = 1, since less computation power is required for 10km grid. Larger tiling grids require more computational ressources.","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"kmSYNKAWPp"}],"key":"EEOof1JUeJ"},{"type":"paragraph","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"children":[{"type":"inlineCode","value":"resolution","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"key":"kBcpspbNCd"},{"type":"text","value":" = 10, which means our images will have a 10m resolution","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"key":"FukAqFot8c"}],"key":"Xo3T3BbgGA"}],"key":"xJfUPtoijL"},{"type":"listItem","spread":true,"position":{"start":{"line":33,"column":1},"end":{"line":36,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"children":[{"type":"strong","position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"children":[{"type":"text","value":"buffer","position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"key":"ohkvC03Dzj"}],"key":"L1iSD8gOBF"},{"type":"text","value":": (Optional) A ","position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"key":"lnk4wgw75j"},{"type":"link","url":"https://sentinelhub-py.readthedocs.io/en/latest/sentinelhub_batch.html?highlight=SentinelHubBatch.tiling_grid#sentinelhub.sentinelhub_batch.SentinelHubBatch.tiling_grid","position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"children":[{"type":"text","value":"buffer","position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"key":"asfNxPsweu"}],"urlSource":"https://sentinelhub-py.readthedocs.io/en/latest/sentinelhub_batch.html?highlight=SentinelHubBatch.tiling_grid#sentinelhub.sentinelhub_batch.SentinelHubBatch.tiling_grid","key":"genlXa9Wg2"},{"type":"text","value":" around each tile can be defined.","position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"key":"yfAvjJaYKc"}],"key":"MnDPcQhkLE"},{"type":"paragraph","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"children":[{"type":"text","value":"Set in the following format: ","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"YxgUqi1kxQ"},{"type":"inlineCode","value":"(int,int)","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"ZhiMlBH6ss"},{"type":"text","value":" or ","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"wGuxfL0utV"},{"type":"inlineCode","value":"None","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"NC8Mfj8KVI"},{"type":"text","value":".","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"xhpkLRGLma"}],"key":"uXhF81aikD"}],"key":"enmnlFemv9"},{"type":"listItem","spread":true,"position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"children":[{"type":"strong","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"children":[{"type":"text","value":"bucketName","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"gwpyA0hp37"}],"key":"xrchm21RnS"},{"type":"text","value":": the ","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"niXRI1otJl"},{"type":"link","url":"https://docs.sentinel-hub.com/api/latest/api/batch/#aws-s3-bucket-settings","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"children":[{"type":"text","value":"configured","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"KwUM0kHXbI"}],"urlSource":"https://docs.sentinel-hub.com/api/latest/api/batch/#aws-s3-bucket-settings","key":"CfUT7g9uPI"},{"type":"text","value":" Amazon S3 Bucket","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"ymIjlOdlCj"}],"key":"jI68mn1KRF"}],"key":"sOCMtyBrE3"},{"type":"listItem","spread":true,"position":{"start":{"line":38,"column":1},"end":{"line":38,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":38,"column":1},"end":{"line":38,"column":1}},"children":[{"type":"strong","position":{"start":{"line":38,"column":1},"end":{"line":38,"column":1}},"children":[{"type":"text","value":"description","position":{"start":{"line":38,"column":1},"end":{"line":38,"column":1}},"key":"zr7ZzHGROi"}],"key":"FAnaMzr4xW"},{"type":"text","value":": A personalised description for the request.","position":{"start":{"line":38,"column":1},"end":{"line":38,"column":1}},"key":"mmcdNaILLE"}],"key":"dTjWfpE5lY"}],"key":"KoYkB13k82"}],"key":"FPKBGK2utH"}],"key":"gh9BfI09fv"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"Evalscript = evalscript\ngeometry = country_sim\ncrs = CRS.UTM_32N\ndatasource = DataCollection.SENTINEL2_L1C\ntime_interval = (START, END)\nmosaickingOrder = \"mostRecent\"\nmaxCloudCoverage = 1.0\nupsampling = \"NEAREST\"\ndownsampling = \"NEAREST\"\noutput_type = MimeType.TIFF \ntilingGridId = 1 \nresolution = 10 \nbuffer = (0, 0)\nbucketName = aws_bucket_name \ndescription = \"Slovenia LULC data example\" ","key":"Y03szS2LMO"},{"type":"output","id":"iY6NUDPePwTPoiik6Fkoz","data":[],"key":"LRPnJ0Wq5E"}],"key":"XzMjJiNzR9"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"request_shp = SentinelHubRequest(\n    evalscript=Evalscript,\n    input_data=[\n        SentinelHubRequest.input_data(\n            data_collection=datasource,\n            time_interval=time_interval,\n            mosaicking_order=mosaickingOrder,\n            maxcc=maxCloudCoverage,\n            upsampling=upsampling,\n            downsampling=downsampling,\n        )\n    ],\n    responses=[\n        SentinelHubRequest.output_response(\"B02\", output_type),\n        SentinelHubRequest.output_response(\"B03\", output_type),\n        SentinelHubRequest.output_response(\"B04\", output_type),\n        SentinelHubRequest.output_response(\"B08\", output_type),\n        SentinelHubRequest.output_response(\"B11\", output_type),\n        SentinelHubRequest.output_response(\"B12\", output_type),\n        SentinelHubRequest.output_response(\"NDVI\", output_type),\n        SentinelHubRequest.output_response(\"NDWI\", output_type),\n        SentinelHubRequest.output_response(\"NDBI\", output_type),\n        SentinelHubRequest.output_response(\"data_mask\", output_type)\n    ],\n    geometry=Geometry(geometry, crs=crs),\n    config=config\n)\n\nbatch = SentinelHubBatch(config=config)\n\nbatch_request = batch.create(\n    request_shp,\n    tiling_grid=SentinelHubBatch.tiling_grid(\n        grid_id=tilingGridId,\n        resolution=resolution,\n        buffer=buffer\n    ),\n    bucket_name=bucketName,\n    description=description\n)","key":"G1x4CLS7H5"},{"type":"output","id":"m1GXmHyT0Rwq58HITGVA3","data":[],"key":"HHV8tTqFT6"}],"key":"cLTLsU2nxG"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":5,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"1.2.2 Run the Batch request","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"OnqE0VnRNe"}],"identifier":"id-1-2-2-run-the-batch-request","label":"1.2.2 Run the Batch request","html_id":"id-1-2-2-run-the-batch-request","implicit":true,"key":"N3w3DPeYQx"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Once all the parameters are set we are ready to run the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"k44J2Z65Yc"},{"type":"inlineCode","value":"Batch","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"fILm898Ip1"},{"type":"text","value":" process. The batch processing API comes with the set of REST APIs which support the execution of various workflows. A diagram of the statuses of a batch processing request is located ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ZNNLBKVQQa"},{"type":"link","url":"https://docs.sentinel-hub.com/api/latest/api/batch/#workflow","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"here","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"DOKEHNyL8z"}],"urlSource":"https://docs.sentinel-hub.com/api/latest/api/batch/#workflow","key":"oQRCikSbE3"},{"type":"text","value":".","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Rh4ElS721Y"}],"key":"Mfj9nDzcpU"}],"key":"mROZ5lf9pJ"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":5,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Start the request and return status","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"lELeI5RahM"}],"identifier":"start-the-request-and-return-status","label":"Start the request and return status","html_id":"start-the-request-and-return-status","implicit":true,"key":"IjFs2tPdEE"}],"key":"W78BHBZbae"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"batch_request.to_dict()","key":"wB79i1Ktzw"},{"type":"output","id":"osbQ2XteE8fZbtadZHVfy","data":[{"output_type":"execute_result","execution_count":13,"metadata":{},"data":{"text/plain":{"content":"{'id': '789fd6b7-7d4b-4cbf-9abc-67a1d9cc95e4',\n 'processRequest': {'input': {'bounds': {'geometry': {'type': 'Polygon',\n     'crs': {'type': 'name',\n      'properties': {'name': 'urn:ogc:def:crs:EPSG::32632'}},\n     'coordinates': [[[919628.9108834544, 5119356.917076456],\n       [918749.0781451423, 5120862.307909182],\n       [918333.910070902, 5121281.140880498],\n       [918457.8990774148, 5122227.504274412],\n       [918894.6468967017, 5122811.020878375],\n       [919576.0567221006, 5123163.166090239],\n       [920551.1006553276, 5123234.722209015],\n       [921384.9902743214, 5123793.067258271],\n       [922186.3912854855, 5125009.093105534],\n       [922565.9886279197, 5125006.844256398],\n       [923099.5064763993, 5124596.299383719],\n       [925954.2380414003, 5125495.59598793],\n       [926246.687521957, 5125258.720397337],\n       [926849.6681557371, 5123868.441863545],\n       [928300.4334644956, 5122333.2455211105],\n       [930479.711624069, 5121614.0981342485],\n       [932438.9770145733, 5121409.564501522],\n       [932646.1667139526, 5121146.387974464],\n       [933023.6338520547, 5119446.811981134],\n       [934336.7047884844, 5118773.192229376],\n       [935566.2184357158, 5118541.604306243],\n       [937296.0250913996, 5118771.308494287],\n       [938933.2076325824, 5119418.233515025],\n       [939595.1275298094, 5119337.751129662],\n       [940207.7555634322, 5118994.946923946],\n       [941717.1245460573, 5119240.58864772],\n       [942876.8477811634, 5118531.816233686],\n       [943118.1057037627, 5118105.645787608],\n       [943928.6058421925, 5117739.897559745],\n       [944109.31714999, 5117355.209279513],\n       [943921.0563007102, 5115782.096776407],\n       [944814.7599488231, 5114854.377138535],\n       [945568.6142047391, 5113408.6205148585],\n       [945366.8593595305, 5112589.626113559],\n       [945623.720304364, 5110291.6585146235],\n       [944746.0548243101, 5109471.052593331],\n       [944410.343643281, 5109386.160755647],\n       [942966.4762767798, 5109990.345194248],\n       [942206.4564265149, 5110535.1299080085],\n       [941518.983230133, 5110602.578150821],\n       [940641.1774913804, 5110021.029206983],\n       [939894.6685551882, 5108932.130838223],\n       [938611.971331144, 5108073.606699095],\n       [936053.1783967619, 5107785.695032441],\n       [934608.3064589618, 5108611.437683343],\n       [932266.2133111083, 5110477.457048082],\n       [930610.5501451959, 5110697.848110835],\n       [929027.9075271739, 5110206.128843298],\n       [929007.7949406862, 5107828.484080727],\n       [928761.1606812896, 5107433.287430946],\n       [928340.5202479315, 5107394.417220363],\n       [926818.8025522218, 5108109.889881261],\n       [926235.7449728065, 5108035.855183048],\n       [924797.9282862529, 5107393.716638754],\n       [924273.9167598567, 5106339.48624392],\n       [921995.5588678899, 5105139.777239488],\n       [921626.8454615258, 5105135.1669395575],\n       [920583.0245687524, 5105950.73694475],\n       [920502.0339262019, 5106997.027372728],\n       [921109.5468206694, 5108095.835206634],\n       [921975.1309665262, 5109176.774922407],\n       [920985.882632233, 5109884.632823985],\n       [919694.7407430336, 5111367.579272935],\n       [919727.6633128797, 5111918.670426843],\n       [920456.3193563694, 5112480.5993394125],\n       [920330.4177488316, 5113904.5125860125],\n       [918961.0486138583, 5116779.320521747],\n       [918578.5853978395, 5117011.804211284],\n       [917930.0946484923, 5117042.814801975],\n       [917652.0992996809, 5117429.603044663],\n       [917788.0705027658, 5117839.756231751],\n       [919628.9108834544, 5119356.917076456]]]},\n    'properties': {'crs': 'http://www.opengis.net/def/crs/EPSG/0/32632'}},\n   'data': [{'dataFilter': {'timeRange': {'from': '2019-04-01T00:00:00Z',\n       'to': '2019-10-31T23:59:59Z'},\n      'mosaickingOrder': 'mostRecent',\n      'maxCloudCoverage': 100.0,\n      'previewMode': 'DETAIL'},\n     'processing': {'upsampling': 'NEAREST',\n      'downsampling': 'NEAREST',\n      'harmonizeValues': True},\n     'type': 'S2L1C'}]},\n  'output': {'responses': [{'identifier': 'B02',\n     'format': {'type': 'image/tiff'},\n     'logo': False},\n    {'identifier': 'B03', 'format': {'type': 'image/tiff'}, 'logo': False},\n    {'identifier': 'B04', 'format': {'type': 'image/tiff'}, 'logo': False},\n    {'identifier': 'B08', 'format': {'type': 'image/tiff'}, 'logo': False},\n    {'identifier': 'B11', 'format': {'type': 'image/tiff'}, 'logo': False},\n    {'identifier': 'B12', 'format': {'type': 'image/tiff'}, 'logo': False},\n    {'identifier': 'NDVI', 'format': {'type': 'image/tiff'}, 'logo': False},\n    {'identifier': 'NDWI', 'format': {'type': 'image/tiff'}, 'logo': False},\n    {'identifier': 'NDBI', 'format': {'type': 'image/tiff'}, 'logo': False},\n    {'identifier': 'data_mask',\n     'format': {'type': 'image/tiff'},\n     'logo': False}]},\n  'evalscript': '\\n//VERSION=3\\n\\n// Calculate number of bands needed for all intervals\\n// Initialise dates and interval\\n// Beware: in JS months are 0 indexed\\nvar start_date = new Date(2019, 3, 1, 0, 0, 0);\\nvar end_date = new Date(2019, 9, 31, 0, 0, 0);\\nvar sampled_dates = sample_timestamps(start_date, end_date, 15, \\'day\\').map(d => withoutTime(d));\\nvar nb_bands = sampled_dates.length;\\nvar n_valid = 0;\\nvar n_all = 0;\\n\\nfunction interval_search(x, arr) {\\n  let start_idx = 0,  end_idx = arr.length - 2;\\n\\n  // Iterate while start not meets end\\n  while (start_idx <= end_idx) {\\n    // Find the mid index\\n    let mid_idx = (start_idx + end_idx) >> 1;\\n\\n    // If element is present at mid, return True\\n    if (arr[mid_idx] <= x && x < arr[mid_idx + 1]) {\\n      return mid_idx;\\n    }\\n    // Else look in left or right half accordingly\\n    else if (arr[mid_idx + 1] <= x) start_idx = mid_idx + 1;\\n    else end_idx = mid_idx - 1;\\n  }\\n  if (x == arr[arr.length-1]){\\n    return arr.length-2;\\n  }\\n\\n  return undefined;\\n}\\n\\nfunction linearInterpolation(x, x0, y0, x1, y1, no_data_value=NaN) {\\n  if (x < x0 || x > x1) {\\n    return no_data_value;\\n  }\\n  var a = (y1 - y0) / (x1 - x0);\\n  var b = -a * x0 + y0;\\n  return a * x + b;\\n}\\n\\nfunction lininterp(x_arr, xp_arr, fp_arr, no_data_value=NaN) {\\n  results = [];\\n  data_mask = [];\\n  xp_arr_idx = 0;\\n  for(var i=0; i<x_arr.length; i++){\\n    var x = x_arr[i];\\n    n_all+=1;\\n    interval = interval_search(x, xp_arr);\\n    if (interval === undefined) {\\n      data_mask.push(0);\\n      results.push(no_data_value);\\n      continue;\\n    }\\n    data_mask.push(1);\\n    n_valid+=1;\\n    results.push(\\n      linearInterpolation(\\n        x,\\n        xp_arr[interval],\\n        fp_arr[interval],\\n        xp_arr[interval+1],\\n        fp_arr[interval+1], \\n        no_data_value\\n      )\\n    );\\n  }\\n\\n  return [results, data_mask];\\n}\\n\\n\\nfunction interpolated_index(index_a, index_b){\\n  // Calculates the index for all bands in array\\n  var index_data = [];\\n  for (var i = 0; i < index_a.length; i++){\\n     // UINT index returned\\n     let ind = (index_a[i] - index_b[i]) / (index_a[i] + index_b[i]);\\n     index_data.push(ind * 10000 + 10000);\\n  }\\n  \\n  return index_data\\n}\\n\\n\\nfunction increase(original_date, period, period_unit){\\n    date = new Date(original_date)\\n    switch(period_unit){\\n        case \\'millisecond\\':\\n            return new Date(date.setMilliseconds(date.getMilliseconds()+period));\\n        case \\'second\\':\\n            return new Date(date.setSeconds(date.getSeconds()+period));\\n        case \\'minute\\':\\n            return new Date(date.setMinutes(date.getMinutes()+period));\\n        case \\'hour\\':\\n            return new Date(date.setHours(date.getHours()+period));\\n        case \\'day\\':\\n            return new Date(date.setDate(date.getDate()+period));\\n        case \\'month\\':\\n            return new Date(date.setMonth(date.getMonth()+period));\\n        default:\\n            return undefined\\n    }\\n}\\n\\nfunction sample_timestamps(start, end, period, period_unit) {\\n    var cDate = new Date(start);\\n    var sampled_dates = []\\n    while (cDate < end) {\\n        sampled_dates.push(cDate);\\n        cDate = increase(cDate, period, period_unit);\\n    }\\n    return sampled_dates;\\n}\\n\\nfunction is_valid(smp){\\n  // Check if the sample is valid (i.e. contains no clouds or snow)\\n  let clm = smp.CLM;\\n  let dm = smp.dataMask;\\n\\n  if (clm === 1 || clm === 255) {\\n        return false;\\n  } else if (dm !=1 ) {\\n        return false;\\n  } else {\\n  return true;\\n  }\\n}\\n\\nfunction withoutTime(intime){\\n  // Return date without time\\n  intime.setHours(0, 0, 0, 0);\\n  return intime;\\n}\\n\\n\\n// Sentinel Hub functions\\nfunction setup() {\\n  // Setup input/output parameters\\n    return {\\n        input: [{\\n            bands: [\"B02\", \"B03\", \"B04\", \"B08\", \"B11\", \"B12\", \"CLM\", \"dataMask\"],\\n            units: \"DN\"\\n        }],\\n      output: [\\n          {id: \"B02\", bands: nb_bands, sampleType: SampleType.UINT16},\\n          {id: \"B03\", bands: nb_bands, sampleType: SampleType.UINT16},\\n          {id: \"B04\", bands: nb_bands, sampleType: SampleType.UINT16},\\n          {id: \"B08\", bands: nb_bands, sampleType: SampleType.UINT16},\\n          {id: \"B11\", bands: nb_bands, sampleType: SampleType.UINT16},\\n          {id: \"B12\", bands: nb_bands, sampleType: SampleType.UINT16},\\n          {id: \"NDVI\", bands: nb_bands, sampleType: SampleType.UINT16},\\n          {id: \"NDWI\", bands: nb_bands, sampleType: SampleType.UINT16},\\n          {id: \"NDBI\", bands: nb_bands, sampleType: SampleType.UINT16},\\n          {id: \"data_mask\", bands: nb_bands, sampleType: SampleType.UINT8}\\n      ],\\n    mosaicking: \"ORBIT\"\\n    }\\n}\\n\\n\\n// Evaluate pixels in the bands\\nfunction evaluatePixel(samples, scenes) {\\n  \\n  // Initialise arrays\\n  var valid_samples = {\\'B02\\':[], \\'B03\\':[], \\'B04\\':[], \\'B08\\':[], \\'B11\\':[], \\'B12\\':[]}; \\n  \\n  var valid_dates = []\\n  // Loop over samples. \\n  for (var i = samples.length-1; i >= 0; i--){\\n      if (is_valid(samples[i])) {\\n        valid_dates.push(withoutTime(new Date(scenes[i].date)));\\n        valid_samples[\\'B02\\'].push(samples[i].B02);\\n        valid_samples[\\'B03\\'].push(samples[i].B03);\\n        valid_samples[\\'B04\\'].push(samples[i].B04);\\n        valid_samples[\\'B08\\'].push(samples[i].B08);\\n        valid_samples[\\'B11\\'].push(samples[i].B11);\\n        valid_samples[\\'B12\\'].push(samples[i].B12);\\n      }\\n  }\\n  \\n  var [b02_interpolated, b02_dm] = lininterp(sampled_dates, valid_dates, valid_samples[\\'B02\\'], 0);\\n  var [b03_interpolated, b03_dm] = lininterp(sampled_dates, valid_dates, valid_samples[\\'B03\\'], 0);\\n  var [b04_interpolated, b04_dm] = lininterp(sampled_dates, valid_dates, valid_samples[\\'B04\\'], 0);\\n  var [b08_interpolated, b08_dm] = lininterp(sampled_dates, valid_dates, valid_samples[\\'B08\\'], 0);\\n  var [b11_interpolated, b11_dm] = lininterp(sampled_dates, valid_dates, valid_samples[\\'B11\\'], 0);\\n  var [b12_interpolated, b12_dm] = lininterp(sampled_dates, valid_dates, valid_samples[\\'B12\\'], 0);\\n\\n  // Calculate indices and return optimised for UINT16 format (will need unpacking)\\n  var ndvi = interpolated_index(b08_interpolated, b04_interpolated);\\n  var ndwi = interpolated_index(b03_interpolated, b08_interpolated);\\n  var ndbi = interpolated_index(b11_interpolated, b08_interpolated);\\n  \\n  // Return all arrays\\n  return {\\n            B02: b02_interpolated,\\n            B03: b03_interpolated,\\n            B04: b04_interpolated,\\n            B08: b08_interpolated,\\n            B11: b11_interpolated,\\n            B12: b12_interpolated,\\n            NDVI: ndvi,\\n            NDWI: ndwi,\\n            NDBI: ndbi,\\n            data_mask: b02_dm\\n  }\\n}\\n'},\n 'tileCount': 7,\n 'status': 'CREATED',\n 'userId': 'cb04dca1-c8f2-400e-8719-e24fced98fd6',\n 'created': '2022-06-21T16:16:09.756515Z',\n 'tilingGrid': {'id': 1, 'bufferY': 0, 'bufferX': 0, 'resolution': 10.0},\n 'output': {},\n 'bucketName': 'edc-marketplace-test',\n 'description': 'Slovenia LULC data example',\n 'valueEstimate': None,\n 'tileWidthPx': 1000,\n 'tileHeightPx': 1000,\n 'userAction': 'NONE',\n 'userActionUpdated': '2022-06-21T16:16:09.833676Z',\n 'error': None}","content_type":"text/plain"}}}],"key":"AdYVSuHvNB"}],"key":"vOmxKjMMT5"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Extract request id","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"gxcoMD3yPd"}],"key":"NNUbDMx1oO"}],"key":"i9aqs0Swgf"}],"key":"mpgpUqOEQ6"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"request_id = batch_request.to_dict()['id']","key":"v1s2bsOmHh"},{"type":"output","id":"lJ72mH3GdV9xFweG230xl","data":[],"key":"zilMDr1gxu"}],"key":"mfDzpP283B"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Re-initialize the request with its request id (Optional)","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"cwWqMk2cKN"}],"key":"MApZHRlw5K"}],"key":"shrls9Y9Ai"}],"key":"J7SwFWnC5m"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# batch = SentinelHubBatch(config=config)\n\n# reinit_request = batch.get_request(request_id)\n\n# reinit_request.to_dict()","key":"wiUVTqLFr0"},{"type":"output","id":"RuL-4HYHdL5vF_UkzT9Vc","data":[],"key":"GkAxbJafeU"}],"key":"wAC9oWNPXC"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":5,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Show request status","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"KpHtRaZGJj"}],"identifier":"show-request-status","label":"Show request status","html_id":"show-request-status","implicit":true,"key":"UGtjMQZAHP"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"In the cell below, we will check the status of the batch processing request. Because Batch Processing API is an asynchronous REST service, we can execute this cell all along the process to verify the progress of the request.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"PE28dJnltg"}],"key":"r8N5GHXzkh"}],"key":"VWSsz0XQDj"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"batch_request = batch.get_request(batch_request)\n\nbatch_request.status","key":"vQHbQ98Suu"},{"type":"output","id":"GuJG1VkL48A2UU3U8U4tQ","data":[{"output_type":"execute_result","execution_count":16,"metadata":{},"data":{"text/plain":{"content":"<BatchRequestStatus.CREATED: 'CREATED'>","content_type":"text/plain"}}}],"key":"aJYBYfUHpx"}],"key":"vRB9ID9Kzo"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":5,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Additional analysis","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"zPsqXOHOoo"}],"identifier":"additional-analysis","label":"Additional analysis","html_id":"additional-analysis","implicit":true,"key":"HSnRir6u1o"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"When executing the following cell:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"B4UJwJq5DK"}],"key":"orTdBPvNSm"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":5,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"the status of the request changes to ANALYSING,","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"QX8DU9Ujuk"}],"key":"rBGmNGPRYu"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"the evalscript is validated,","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"edH8wquHDF"}],"key":"pEVPe2eweh"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"a list of required tiles is created, and","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"k1xwZAqIbO"}],"key":"sxdCdVg1w9"},{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"the request’s cost is estimated (i.e. the estimated number of processing units (PU) needed for the requested processing).","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"naV6HA4lcm"}],"key":"qX6mQUW836"},{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"After the analysis is finished the status of the request changes to ANALYSIS_DONE.","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"n8oNJ6satf"}],"key":"h9Ur0LWoeu"}],"key":"HxPDUDZmQI"}],"key":"Xen73BvyYn"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"batch.start_analysis(batch_request)","key":"skMpeIatty"},{"type":"output","id":"vM4eHEmZvNZv_-rJ5jJaT","data":[{"output_type":"execute_result","execution_count":17,"metadata":{},"data":{"text/plain":{"content":"''","content_type":"text/plain"}}}],"key":"GHcbGa7yAi"}],"key":"eUoQq1jF2n"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Note: At this point you can run the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"BlFINUrVJm"},{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Show request status","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xNNPFaCD8M"}],"key":"keQ5vXdFyB"},{"type":"text","value":" cell again to check the status of the request.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"S99e89wMBs"}],"key":"ZogOEXnJFr"}],"key":"CsbKUO21hn"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"while batch_request.status.value != 'ANALYSIS_DONE':\n    batch_request = batch.get_request(batch_request)\n    sleep(10)\n    \nbatch_request.status","key":"n90Dq312Ls"},{"type":"output","id":"Bwpyq2s4eI_Zj5A39fncR","data":[{"output_type":"execute_result","execution_count":18,"metadata":{},"data":{"text/plain":{"content":"<BatchRequestStatus.ANALYSIS_DONE: 'ANALYSIS_DONE'>","content_type":"text/plain"}}}],"key":"Tz0dGJQu3D"}],"key":"fykaXveIjR"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Estimate number of processing units","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Zd7dcyqVon"}],"key":"iLCjOHIzSt"}],"key":"afUAYyNYEb"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Once analysis is completed the valueEstimate tells us an estimated number of processing units the batch job will cost.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"McIJTZqVQ9"}],"key":"iytUw6Zte6"}],"key":"fLlPZ94fkr"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"print(f'Running this batch job will require approximately {batch_request.value_estimate:.4f} processing units')","key":"BIwow3eIGS"},{"type":"output","id":"NroyNi7HkjuU5mTjF1ed1","data":[{"name":"stdout","output_type":"stream","text":"Running this batch job will require approximately 6319.6816 processing units\n"}],"key":"JPkzN3Ljr2"}],"key":"g6CAjMWvuM"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Check tile definitions","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"LAXYi0tWuY"}],"key":"wmgTrCermU"}],"key":"Zr59YOQmPI"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"we can check information about all tiles.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"n6M3HAENyh"}],"key":"ImpSf7wxBe"}],"key":"EZuwad5kcR"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"for tile_info in batch.iter_tiles(batch_request):\n    print(tile_info)","key":"MB9KNF9ha1"},{"type":"output","id":"kaxtOFWsnoCNcz3ZdLcY9","data":[{"name":"stdout","output_type":"stream","text":"{'id': 2558707, 'requestId': '789fd6b7-7d4b-4cbf-9abc-67a1d9cc95e4', 'geometry': {'type': 'Polygon', 'crs': {'type': 'name', 'properties': {'name': 'urn:ogc:def:crs:EPSG::4326'}}, 'coordinates': [[[14.352619160260875, 46.141743080954406], [14.351561800658885, 46.23173780922709], [14.481243368706025, 46.23239979824391], [14.482089292227679, 46.14240300576524], [14.352619160260875, 46.141743080954406]]]}, 'origin': {'type': 'Point', 'crs': {'type': 'name', 'properties': {'name': 'urn:ogc:def:crs:EPSG::32633'}}, 'coordinates': [450000.0, 5120000.0]}, 'name': '33TVM_5_8', 'status': 'PENDING'}\n{'id': 2558708, 'requestId': '789fd6b7-7d4b-4cbf-9abc-67a1d9cc95e4', 'geometry': {'type': 'Polygon', 'crs': {'type': 'name', 'properties': {'name': 'urn:ogc:def:crs:EPSG::4326'}}, 'coordinates': [[[14.353671490381176, 46.051746910714016], [14.352619160260875, 46.141743080954406], [14.482089292227679, 46.14240300576524], [14.482931191867412, 46.05240477798336], [14.353671490381176, 46.051746910714016]]]}, 'origin': {'type': 'Point', 'crs': {'type': 'name', 'properties': {'name': 'urn:ogc:def:crs:EPSG::32633'}}, 'coordinates': [450000.0, 5110000.0]}, 'name': '33TVM_5_9', 'status': 'PENDING'}\n{'id': 2558599, 'requestId': '789fd6b7-7d4b-4cbf-9abc-67a1d9cc95e4', 'geometry': {'type': 'Polygon', 'crs': {'type': 'name', 'properties': {'name': 'urn:ogc:def:crs:EPSG::4326'}}, 'coordinates': [[[14.354718820634279, 45.96174929842303], [14.353671490381176, 46.051746910714016], [14.482931191867412, 46.05240477798336], [14.483769091319814, 45.96240511477266], [14.354718820634279, 45.96174929842303]]]}, 'origin': {'type': 'Point', 'crs': {'type': 'name', 'properties': {'name': 'urn:ogc:def:crs:EPSG::32633'}}, 'coordinates': [450000.0, 5100000.0]}, 'name': '33TVL_5_0', 'status': 'PENDING'}\n{'id': 2558738, 'requestId': '789fd6b7-7d4b-4cbf-9abc-67a1d9cc95e4', 'geometry': {'type': 'Polygon', 'crs': {'type': 'name', 'properties': {'name': 'urn:ogc:def:crs:EPSG::4326'}}, 'coordinates': [[[14.74146159543647, 46.053281965203496], [14.741040621918842, 46.14328293654669], [14.870519807916505, 46.143502924784066], [14.870730297637728, 46.0535012675197], [14.74146159543647, 46.053281965203496]]]}, 'origin': {'type': 'Point', 'crs': {'type': 'name', 'properties': {'name': 'urn:ogc:def:crs:EPSG::32633'}}, 'coordinates': [480000.0, 5110000.0]}, 'name': '33TVM_8_9', 'status': 'PENDING'}\n{'id': 2558728, 'requestId': '789fd6b7-7d4b-4cbf-9abc-67a1d9cc95e4', 'geometry': {'type': 'Polygon', 'crs': {'type': 'name', 'properties': {'name': 'urn:ogc:def:crs:EPSG::4326'}}, 'coordinates': [[[14.612194893508299, 46.052916466242046], [14.611563448043396, 46.1429162944107], [14.741040621918842, 46.14328293654669], [14.74146159543647, 46.053281965203496], [14.612194893508299, 46.052916466242046]]]}, 'origin': {'type': 'Point', 'crs': {'type': 'name', 'properties': {'name': 'urn:ogc:def:crs:EPSG::32633'}}, 'coordinates': [470000.0, 5110000.0]}, 'name': '33TVM_7_9', 'status': 'PENDING'}\n{'id': 2558717, 'requestId': '789fd6b7-7d4b-4cbf-9abc-67a1d9cc95e4', 'geometry': {'type': 'Polygon', 'crs': {'type': 'name', 'properties': {'name': 'urn:ogc:def:crs:EPSG::4326'}}, 'coordinates': [[[14.482089292227679, 46.14240300576524], [14.481243368706025, 46.23239979824391], [14.610928984494034, 46.23291469246024], [14.611563448043396, 46.1429162944107], [14.482089292227679, 46.14240300576524]]]}, 'origin': {'type': 'Point', 'crs': {'type': 'name', 'properties': {'name': 'urn:ogc:def:crs:EPSG::32633'}}, 'coordinates': [460000.0, 5120000.0]}, 'name': '33TVM_6_8', 'status': 'PENDING'}\n{'id': 2558609, 'requestId': '789fd6b7-7d4b-4cbf-9abc-67a1d9cc95e4', 'geometry': {'type': 'Polygon', 'crs': {'type': 'name', 'properties': {'name': 'urn:ogc:def:crs:EPSG::4326'}}, 'coordinates': [[[14.483769091319814, 45.96240511477266], [14.482931191867412, 46.05240477798336], [14.612194893508299, 46.052916466242046], [14.612823338661443, 45.962915207795376], [14.483769091319814, 45.96240511477266]]]}, 'origin': {'type': 'Point', 'crs': {'type': 'name', 'properties': {'name': 'urn:ogc:def:crs:EPSG::32633'}}, 'coordinates': [460000.0, 5100000.0]}, 'name': '33TVL_6_0', 'status': 'PENDING'}\n{'id': 2558629, 'requestId': '789fd6b7-7d4b-4cbf-9abc-67a1d9cc95e4', 'geometry': {'type': 'Polygon', 'crs': {'type': 'name', 'properties': {'name': 'urn:ogc:def:crs:EPSG::4326'}}, 'coordinates': [[[14.741880568664696, 45.96327956726176], [14.74146159543647, 46.053281965203496], [14.870730297637728, 46.0535012675197], [14.87093978718978, 45.963498185864594], [14.741880568664696, 45.96327956726176]]]}, 'origin': {'type': 'Point', 'crs': {'type': 'name', 'properties': {'name': 'urn:ogc:def:crs:EPSG::32633'}}, 'coordinates': [480000.0, 5100000.0]}, 'name': '33TVL_8_0', 'status': 'PENDING'}\n{'id': 2558718, 'requestId': '789fd6b7-7d4b-4cbf-9abc-67a1d9cc95e4', 'geometry': {'type': 'Polygon', 'crs': {'type': 'name', 'properties': {'name': 'urn:ogc:def:crs:EPSG::4326'}}, 'coordinates': [[[14.482931191867412, 46.05240477798336], [14.482089292227679, 46.14240300576524], [14.611563448043396, 46.1429162944107], [14.612194893508299, 46.052916466242046], [14.482931191867412, 46.05240477798336]]]}, 'origin': {'type': 'Point', 'crs': {'type': 'name', 'properties': {'name': 'urn:ogc:def:crs:EPSG::32633'}}, 'coordinates': [460000.0, 5110000.0]}, 'name': '33TVM_6_9', 'status': 'PENDING'}\n{'id': 2558619, 'requestId': '789fd6b7-7d4b-4cbf-9abc-67a1d9cc95e4', 'geometry': {'type': 'Polygon', 'crs': {'type': 'name', 'properties': {'name': 'urn:ogc:def:crs:EPSG::4326'}}, 'coordinates': [[[14.612823338661443, 45.962915207795376], [14.612194893508299, 46.052916466242046], [14.74146159543647, 46.053281965203496], [14.741880568664696, 45.96327956726176], [14.612823338661443, 45.962915207795376]]]}, 'origin': {'type': 'Point', 'crs': {'type': 'name', 'properties': {'name': 'urn:ogc:def:crs:EPSG::32633'}}, 'coordinates': [470000.0, 5100000.0]}, 'name': '33TVL_7_0', 'status': 'PENDING'}\n"}],"key":"miWtB9gYgh"}],"key":"zBk2NfCMr0"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Optionally, we can request information about a single tile.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"uiXkhDnreg"}],"key":"EvHRWBF9ZG"}],"key":"Wu2uMFlFv3"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Specify a tile ID\nTILE_ID = '2558718'\n\nbatch.get_tile(batch_request, TILE_ID)","key":"QNZYhzeMEQ"},{"type":"output","id":"2k-E1bADmZVSuShdSRi83","data":[{"output_type":"execute_result","execution_count":21,"metadata":{},"data":{"text/plain":{"content":"{'id': 2558718,\n 'requestId': '789fd6b7-7d4b-4cbf-9abc-67a1d9cc95e4',\n 'geometry': {'type': 'Polygon',\n  'crs': {'type': 'name',\n   'properties': {'name': 'urn:ogc:def:crs:EPSG::4326'}},\n  'coordinates': [[[14.482931191867412, 46.05240477798336],\n    [14.482089292227679, 46.14240300576524],\n    [14.611563448043396, 46.1429162944107],\n    [14.612194893508299, 46.052916466242046],\n    [14.482931191867412, 46.05240477798336]]]},\n 'origin': {'type': 'Point',\n  'crs': {'type': 'name',\n   'properties': {'name': 'urn:ogc:def:crs:EPSG::32633'}},\n  'coordinates': [460000.0, 5110000.0]},\n 'name': '33TVM_6_9',\n 'status': 'PENDING'}","content_type":"text/plain"}}}],"key":"j8HuPWa5JS"}],"key":"DlNCAP7xTx"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":5,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"START","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"J3gOAPNFuL"}],"identifier":"start","label":"START","html_id":"start","implicit":true,"key":"DDrziKcHEF"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Once you happy with the request parameters and have noted the number of PU consumed (by checking the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"pI37H1Ju62"},{"type":"emphasis","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Show request status","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"JBFVceDmB6"}],"key":"CdKEqF8UMS"},{"type":"text","value":"), you can launch the processing.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"if7PG6r7Dd"}],"key":"BHJBBXNVA6"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"strong","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Note","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"zFTu3WXaLy"}],"key":"hRhiHzhaAO"},{"type":"text","value":": The processing time for this step could be up to an hour or more depending on the amount of data.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"t2MsBM4GRN"}],"key":"o439SU4cFu"}],"key":"y66vxxGsAC"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"batch.start_job(batch_request)","key":"MqAVdrYLxo"},{"type":"output","id":"Ciq9zrGGkBO7qx55RFn9Y","data":[{"output_type":"execute_result","execution_count":22,"metadata":{},"data":{"text/plain":{"content":"''","content_type":"text/plain"}}}],"key":"UOtKmBNKZe"}],"key":"DNgM1YhruS"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":5,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Cancel the request","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"OjFF22u6sR"}],"identifier":"cancel-the-request","label":"Cancel the request","html_id":"cancel-the-request","implicit":true,"key":"GaGZ3sn9VS"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"When the job is running we can decide at any time to cancel it. Results that have already been produced will remain on the bucket.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"s3hQJ6MjWV"}],"key":"Dgo9o3ZG6v"}],"key":"YkaSeLGSGC"}],"key":"W8JvuRqw1i"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"#batch.cancel_job()","key":"FEtvaYEAmN"},{"type":"output","id":"GHvOuxd9XeWzFQkm4vxZA","data":[],"key":"E3tELKTVoM"}],"key":"r8YJeEprhj"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Note: At this point you can run the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"n0WJQy4QJm"},{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Show request status","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"AOgLvAibMA"}],"key":"EDJ2Dhc2sf"},{"type":"text","value":" cell again to check the status of the request.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Y931vlHnCO"}],"key":"RmFTrxzNyl"}],"key":"qtdXWBtTfV"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":5,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Show request status","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"aPTloZf8tI"}],"identifier":"show-request-status","label":"Show request status","html_id":"show-request-status-1","implicit":true,"key":"D8YYVIYt1H"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"In the cell below, we will check the status of the batch processing request. Because Batch Processing API is an asynchronous REST service, we can execute this cell all along the process to verify the progress of the request.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"oeQYyeoc4g"}],"key":"BVQxCN4oWA"}],"key":"PYb2k4E19d"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"while batch_request.status.value != 'DONE':\n    batch_request = batch.get_request(batch_request)\n    sleep(10)\n\nbatch_request.status","key":"gYNWtcZFj1"},{"type":"output","id":"x5Ka7NRRI1MeS0SGxsyOK","data":[{"output_type":"execute_result","execution_count":24,"metadata":{},"data":{"text/plain":{"content":"<BatchRequestStatus.DONE: 'DONE'>","content_type":"text/plain"}}}],"key":"U53ENWW0P6"}],"key":"uo24natwIu"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":5,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Visual tracking of the Batch request","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"OlysKaV9pk"}],"identifier":"visual-tracking-of-the-batch-request","label":"Visual tracking of the Batch request","html_id":"visual-tracking-of-the-batch-request","implicit":true,"key":"LFbWFj0fFY"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"The following cells allow us to track the progress of the Batch request by plotting the status of the tiles. To visually track the progress of the Batch request, we can keep executing the Plotting command.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"TP5zou81yq"}],"key":"OtJ3Mf2zRr"}],"key":"AsJ348YwGL"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"def plot_batch_splitter(splitter):\n    \"\"\" Plots tiles and area geometry from a splitter class\n    \"\"\"\n    tile_geometries = [Geometry(bbox.geometry, bbox.crs) for bbox in splitter.get_bbox_list()]\n    tile_geometries = [geometry.transform(splitter.crs) for geometry in tile_geometries]\n\n    gdf = gpd.GeoDataFrame(\n        {'status': [info['status'] for info in splitter.get_info_list()]},\n        geometry=[geometry.geometry for geometry in tile_geometries],\n        crs=splitter.crs.pyproj_crs()\n    )\n    ax = gdf.plot(column='status', legend=True, figsize=(10, 10))\n\n    area_series = gpd.GeoSeries(\n        [splitter.get_area_shape()],\n        crs=splitter.crs.pyproj_crs()\n    )\n    area_series.plot(ax=ax, facecolor='none', edgecolor='black')\n","key":"rt0WyI2LiE"},{"type":"output","id":"xfP13wtGXMuFhHCMl4DFE","data":[],"key":"l9pAEHgBc0"}],"key":"JodXbb1Ew3"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"splitter = BatchSplitter(batch_request=batch_request, config=config)\nplot_batch_splitter(splitter)","key":"jIrtiYqHF0"},{"type":"output","id":"ILpmgmoTXoBo7I1C5WDFz","data":[{"output_type":"display_data","metadata":{"needs_background":"light"},"data":{"image/png":{"content_type":"image/png","hash":"d456a6c1e535c70a4f425995d11cb111","path":"/example-viewer/build/d456a6c1e535c70a4f425995d11cb111.png"},"text/plain":{"content":"<Figure size 720x720 with 1 Axes>","content_type":"text/plain"}}}],"key":"uRAUuH4IpB"}],"key":"EDir5jvK1j"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":5,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"What if some of my tiles fail?","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"vxqvcLltBo"}],"identifier":"what-if-some-of-my-tiles-fail","label":"What if some of my tiles fail?","html_id":"what-if-some-of-my-tiles-fail","implicit":true,"key":"cx4t9nkNW1"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"It can happen that some of the tiles are not processed, and appear with the status ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Qn4v3L1IEu"},{"type":"inlineCode","value":"FAILED","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"o0B1Nsduer"},{"type":"text","value":" in the plot above. We can use the function defined below to restart the processing for those specific tiles.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"dJQkywjf66"}],"key":"GKYrk7QFdx"}],"key":"B1Z8xRtwK0"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# #Re-run the processing for all the tiles that failed\n# batch.restart_job(batch_request)","key":"i1zcQqBCNK"},{"type":"output","id":"ukjNtPKDq6J-UquXPaBle","data":[],"key":"zXLk5Jgmzh"}],"key":"f3SegkR1DA"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Alternatively, we can re-run processing only for a single tile.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"VBMLEBSVqw"}],"key":"BzjtHsuLX3"}],"key":"hwsXxlFKZm"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# # Specify an ID of a tile that failed\n# FAILED_TILE_ID = ''\n\n# batch.reprocess_tile(batch_request, FAILED_TILE_ID)","key":"F5z7uy8hzv"},{"type":"output","id":"h2VdWKxuacSktO2jMBITB","data":[],"key":"MUBHaMmGA8"}],"key":"r8lrJdArjW"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Part 2: convert Batch process outputs to EOPatches","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"vyDKpFIbNF"}],"identifier":"part-2-convert-batch-process-outputs-to-eopatches","label":"Part 2: convert Batch process outputs to EOPatches","html_id":"part-2-convert-batch-process-outputs-to-eopatches","implicit":true,"key":"JtJYHK9y8H"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"When the Batch request in ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"F8eN89P4HF"},{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Part 1","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"r4Lkz8dse0"}],"key":"MDfVZHyorO"},{"type":"text","value":" has finished running, we should now have the data located in the specified Bucket. In ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"fqVZztPcFX"},{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Part 2","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"LV0FN0lVHA"}],"key":"LiqAHoTyVy"},{"type":"text","value":" we will focus on converting the results to EoPatches and download the data.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"EbHI8CatIl"}],"key":"jhGLY7gqVM"}],"key":"WLNC0pUZCy"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":4,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"2.1 Set parameters for conversion","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Aua8PPXl5E"}],"identifier":"id-2-1-set-parameters-for-conversion","label":"2.1 Set parameters for conversion","html_id":"id-2-1-set-parameters-for-conversion","implicit":true,"key":"SguDt4GYZm"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"First we specify a few parameters for converting the Batch results to EOLearn Patches.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Ae4Tp9jfOb"}],"key":"ZHiCY2CgcY"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"If you want to pick up the Notebook after having run the Batch request in an other session, you will need to specify a few parameters that were already defined in ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"cwsrqDJULM"},{"type":"strong","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Part 1","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"u5XgdnvdBC"}],"key":"UuWA13TOba"},{"type":"text","value":": for that uncomment and run the next cell. If you have just executed the cells in ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"YbyvW0G0w1"},{"type":"strong","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Part 1","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"CFWnPSlgZ5"}],"key":"YbETXv6Fdx"},{"type":"text","value":", you can skip the next cell.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"X666KSklBC"}],"key":"bHUWzv26Ct"}],"key":"YkyOCWqf60"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# # Date parameters\n# START = datetime.date(2019, 4, 1)\n# END = datetime.date(2019, 10, 31)\n\n# INTERVAL = 15  # Interval for date resampling in days\n\n# # Calculate list of dates for the resampling\n# date_iterator = START\n# timestamps = []\n# while date_iterator < END:\n#     timestamps.append(date_iterator)\n#     date_iterator = date_iterator + datetime.timedelta(days=INTERVAL)\n    \n# #Amazon client ID and secret\n# AWS_ID = \"aws-client-id\"\n# AWS_SECRET = \"aws-client-secret\"\n    \n# # Amazon bucket name\n# aws_bucket_name = \"your-bucket-name\"\n\n# # Request ID (from the Batch processing)\n# request_id = \"\"\n\n# #Configuration\n# config = SHConfig()","key":"Ms4XRW9Nrv"},{"type":"output","id":"qz1tcm-flC9_mHETra_DH","data":[],"key":"kbi38fA1sA"}],"key":"l42ZZzx3eD"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Next, we will set the bands that we want to import into the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"hHyyCeCOB1"},{"type":"inlineCode","value":"EOPatches","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"tDwge76Wui"},{"type":"text","value":".","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"QVWQELsDKd"}],"key":"NfFzIFflvU"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"In this example we use:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"XMOlZmVOho"}],"key":"eVJS9cSECt"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":4,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"B02, B03, B04, B08, B11, B12 bands from Sentinel-2","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"XT6T8MKL4W"}],"key":"ezRsGhIJfR"}],"key":"ecZ2keSCXh"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"NDVI, NDWI, NDBI indices","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"WJ4jiemjru"}],"key":"QavR0RTYO3"}],"key":"cockZD321h"},{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Valid data band","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"ypudEEA72i"}],"key":"H2gbUu7Hh6"}],"key":"S3XWOuh3Pa"}],"key":"ouAC1jAIaE"}],"key":"WYlH5Cx9vC"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"band_names = ['B02.tif', 'B03.tif', 'B04.tif', 'B08.tif', 'B11.tif','B12.tif',\n              'NDVI.tif', 'NDWI.tif', 'NDBI.tif']\nis_data_band = 'data_mask.tif'","key":"oTJq8SM5Km"},{"type":"output","id":"amFCWpR80pFTxjAJenMQE","data":[],"key":"hqVKufi88O"}],"key":"IXYg4244qr"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Finally, let’s specify the folder to which we will save the data.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"HryvxF4Mcl"}],"key":"bfpaXpYifC"}],"key":"wJYmPRh1K9"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Output path\nsave_folder = \"./results\"","key":"gTXO7CrCgB"},{"type":"output","id":"6QeUlJ-n-4T7xlYK8jq5Q","data":[],"key":"MIJLQp70yP"}],"key":"PvMFkbvzMX"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"We have defined a class to convert the Batch Request to ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"feHQz9XOlr"},{"type":"inlineCode","value":"EOPatches","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"F0ZkPcB1L5"},{"type":"text","value":" for ease of use below.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"TXyuCQB5hn"}],"key":"qXZcrgi5Lj"}],"key":"OhoGSx6vbk"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"class ImportFromAWS:\n    \"\"\"Import EoPatches from a Batch request.\n    \n    This class regroups all the methods to transform the saved results of a batch request\n    located in an Amazon Bucket to EOPatches locally.\n    \n    :param aws_key: Amazon client ID\n    :type aws_key: str\n    :param aws_secret: Amazon secret\n    :type aws_secret: str\n    :param aws_bucket: Amazon bucket name where the batch results were written\n    :type aws_bucket: str\n    :param request_id: Batch request id\n    :type request_id: str \n    param bands: List of bands that should be considered in the import\n    :type bands: list \n    param timestamps: List of timestamps for resampled data\n    :type timestamps: list\n    param is_data: Name of the IS_DATA band from Batch\n    :type is_data: str, optional\n    :param out_path: Path to folder where EOPatches will be saved\n    :type out_path: str, optional \n    \"\"\"\n    \n    def __init__(self, aws_key, aws_secret, aws_bucket, request_id, bands, timestamps,\n                 is_data=None, out_path=\"./\"):\n        \"\"\"Constructor method.        \n        \"\"\"\n        # Path to save the EoPatches\n        self.out_path = Path(out_path)\n            \n        # Make directory\n        self.out_path.mkdir(parents=True, exist_ok=True)\n\n        # AWS credentials\n        if (aws_key == None or aws_secret == None):\n            raise ValueError(\"No Amazon credential provided!\")\n            \n        # Create Amazon session and settings\n        self.session = boto3.Session(aws_access_key_id=aws_key, \n                                     aws_secret_access_key=aws_secret,\n                                    ) \n        self.s3_resource = self.session.resource('s3')\n        self.s3_client = self.session.client('s3')\n        self.bucket_name = aws_bucket\n        self.bucket = self.s3_resource.Bucket(aws_bucket)\n        \n        # Set up filesytem for Amazon Bucket\n        self.s3fs = S3FS(aws_bucket,\n                         dir_path=request_id,\n                         aws_access_key_id=aws_key,\n                         aws_secret_access_key=aws_secret)\n           \n        # Request id\n        self.request_id = request_id\n        \n        # Information about data and metadata\n        self.is_data = is_data\n        self.bands = bands\n        self.timestamps = [x.isoformat() for x in timestamps]\n\n\n    @staticmethod   \n    def _open_band(AWS_session, bucket, request_id, folder, bandname):\n        \"\"\"Open Band.\n        \n        Using Rasterio, open a band in an Amazon S3 Bucket, and return bbox and data.\n        \n        :param session: Amazon boto session\n        :type session: boto3.Session \n        :param bucket: Amazon bucket name\n        :type bucket: str\n        :param request_id: Name of the Batch request ID\n        :type request_id: str\n        :param folder: Name of the folder in which to query data\n        :type folder: str\n        :param bandname: Filename\n        :type bandname: str \n        \"\"\"\n        # Open with Rasterio\n        with rasterio.Env(rasterio.session.AWSSession(AWS_session)) as env:\n            s3_url = f's3://{bucket}/{request_id}/{folder}/{bandname}'\n            with rasterio.open(s3_url) as source:\n\n                    bbox = BBox(source.bounds, CRS(source.crs.to_epsg()))\n                    data = source.read()\n        return data, bbox\n    \n    \n    @staticmethod   \n    def _open_local_band(band_path):\n        \"\"\"Open Local Band.\n        \n        Using Rasterio, open a band in an Amazon S3 Bucket, and return bbox and data.\n        \n        :param session: Amazon boto session\n        :type session: boto3.Session \n        :param bucket: Amazon bucket name\n        :type bucket: str\n        :param request_id: Name of the Batch request ID\n        :type request_id: str\n        :param folder: Name of the folder in which to query data\n        :type folder: str\n        :param bandname: Filename\n        :type bandname: str \n        \"\"\"\n        # Open with Rasterio\n        with rasterio.open(band_path) as source:\n            bbox = BBox(source.bounds, CRS(source.crs.to_epsg()))\n            data = source.read()\n\n        return (data, bbox)\n\n    \n    @staticmethod\n    def _convert_DN(band, in_band):\n        \"\"\"Convert DN to values.\n        \n        It is cheaper to return INT data from SH Hub. In the evalscript a coefficient is applied\n        to the data to return it as INT, and here it needs to be unpacked. This function (for now)\n        considers only 2 ways of saving data: bands starting with B or indices not starting with B.\n        \n        :param band: Band name to convert\n        :type band: str \n        :param in_band: Numpy array to convert\n        :type in_band: np.array \n        :return: The input numpy array converted depending on band name\n        :rtype: np.array\n        \"\"\"\n        if band.startswith(\"B\"):\n            outband = in_band / 10000.\n        else:\n            outband = (in_band - 10000.) / 10000.\n\n        return outband\n\n\n    @staticmethod\n    def _eopatch_import(folder_system, folders, bucket, bands, timestamps, out_path, local=False,\n                        save_local=True, is_data=None, request_id=None, bucket_name=None, session=None):\n        \"\"\"Import EOPatches from local data.\n        \n        After having downloaded the bucket contents to a local folder, extract the EOPatches.\n        \n        :param folder_system: a fs sytem object containing base directory (S3 or local)\n        :type folder_system: s3fs.S3FS or s3fs.core.S3FileSystem\n        :param folders: List of folders to search through\n        :type folders: list \n        :param bucket: boto3 resource Bucket bucket, see :class:`ImportFromAWS`\n        :type bucket: boto3.S3.Bucket(name)\n        :param bands: List of bands to process\n        :type bands: list\n        :param timestamps: List of timestamps corresponding to the bands\n        :type timestamps: list\n        :param out_path: Output folder where the EOPatches are saved\n        :type out_path: str\n        :param local: Set whether the folders are local or on Amazon S3\n        :type local: bool, optional\n        :param save_local: Set whether the EOPatches are saved to local or on Amazon S3\n        :type save_local: bool, optional\n        :param is_data: Name of band containing information of validity of data\n        :type is_data: str, optional\n        :param request_id: When importing from a Amazon bucket, folder name (from Batch)\n        :type request_id: str, optional\n        :param bucket_name: When importing from a Amazon bucket, bucket name\n        :type bucket_name: str, optional\n        :param session: When importing from a Amazon bucket, boto3 S3 session\n        :type session: boto3.S3.session, optional\n\n        \"\"\"\n        # Initialise counter\n        nb_patch = 0\n        \n        # Ignore json file\n        folders = [x for x in folders if not x.endswith(\"json\")]\n        \n        # Loop over the folders which will become patches\n        for fold in tqdm(folders):\n          \n            # Export switch (in case the bands are missing in a patch)\n            export = True\n\n            # Empty EOPatch to be filled\n            eo_patch = EOPatch()\n\n            # List bands in folder\n            current_bands = folder_system.listdir(fold)\n            \n            # Check if the bands in the folder correspond to the bands wanted\n            if any(elem in current_bands for elem in bands):\n                all_bands = {}\n                # Loop through bands\n                for band in bands:\n                    # Different opening method depending on local or not\n                    if local:\n                        band_data, data_bbox = ImportFromAWS._open_local_band(Path(\n                            folder_system.getsyspath(\"\")).joinpath(fold, band))\n                    else:\n                        band_data, data_bbox = ImportFromAWS._open_band(session, \n                                                                        bucket_name, \n                                                                        request_id,\n                                                                        fold, band)\n                    # Convert band to reflectance or index and save\n                    all_bands[band] = ImportFromAWS._convert_DN(band, band_data)\n\n                     # Get IS_DATA\n                if is_data != None and is_data in current_bands:\n                    # Different opening method depending on local or not\n                    if local:\n                        is_data_array, _ = ImportFromAWS._open_local_band(Path(\n                                folder_system.getsyspath(\"\")).joinpath(fold, is_data))\n                    else:\n                        is_data_array, _ = ImportFromAWS._open_band(session, \n                                                                    bucket_name, \n                                                                    request_id,\n                                                                    fold, is_data)\n            # If the bands don't match, skip the patch\n            else:\n                print(f\"Bands don't match for Patch {fold}... skipping...\")\n                export = False\n\n            # if not flag to skip the band, continue\n            if export:\n                # Add bbox to patch\n                eo_patch.bbox = data_bbox\n\n                # Add bands to patch\n                eo_patch.data['FEATURES'] = np.stack([all_bands[x] for x in all_bands.keys()], axis=-1)\n                \n                # Add is data mask to patch\n                eo_patch.mask[\"IS_DATA\"] = np.expand_dims(is_data_array, axis=-1)\n\n                # Add metadata\n                eo_patch.meta_info[\"time_interval\"] = (START.isoformat(), END.isoformat())\n                eo_patch.meta_info[\"band_list\"] = [x.split('.')[0] for x in bands]\n\n                # Add timestamps\n                eo_patch.timestamp = timestamps\n\n                # Save EOPatch (either on local or on Bucket)\n                if save_local:\n                    save_path = str(Path(out_path).joinpath(\"EOPatches\"))\n                else:\n                    save_path = f\"s3://{bucket_name}/EOPatches\"\n\n                eo_patch.save(f\"{save_path}/eopatch_{nb_patch}\",\n                              overwrite_permission=OverwritePermission.OVERWRITE_PATCH)\n\n                # Increase counter\n                nb_patch += 1\n\n\n    def convert_to_EOPatches(self, local_bucket=None, save_locally=True):\n        \"\"\"Import of EOPatches.\n        \n        This function converts the contents of an Amazon bucket that is\n        stored locally (after download using e.g. `download_S3_bucket`) or \n        stored on Amazon S3 to EOPatches.\n        \n        :param local_bucket: A local folder containing contents of a Bucket\n        :type local_bucket: str, optional\n        \"\"\"\n        \n        if local_bucket is None:\n            # Open Bucket as folder system\n            folder_sys = self.s3fs\n            # Set local flag to False\n            local = False\n        else:\n            # Open local folder system\n            folder_sys = open_fs(local_bucket)\n            #Set local flag to True\n            local = True\n\n        # Get subfolders in the local folder\n        folders = folder_sys.listdir(\"/\")\n        \n        # Run the import\n        self._eopatch_import(folder_sys, folders, self.bucket, self.bands, self.timestamps,\n                             self.out_path, local=local, save_local=save_locally, is_data=self.is_data,\n                             request_id=self.request_id, bucket_name=self.bucket_name, session=self.session)\n\n\n    def download_from_bucket(self, obj_id=\"S3\"):\n        \"\"\"Download S3 Bucket.\n        \n        Downloads the results of a batch request stored in an Amazon\n        bucket, based on the request ID of the class.\n\n        \"\"\"\n        # Check type\n        if obj_id not in [\"S3\", \"EO\"]:\n            raise ValueError(\"Not a correct object ID to download: choose S3 or EO\")\n\n        # Check if a folder named after the reques ID already exists in the output folder\n        if obj_id == \"S3\":\n            path = self.request_id\n        else:\n            path = \"EOPatches\"\n\n        if self.out_path.joinpath(path).is_dir():\n                raise ValueError(\"Bucket folder already exists on local path! Delete and try again.\")\n        \n        # Download S3/EO bucket\n        print(\"Downloading bucket contents\")\n        \n        keys = []\n        dirs = []\n        next_token = ''\n        base_kwargs = {\n            'Bucket':self.bucket_name,\n            'Prefix':path,\n        }\n        while next_token is not None:\n            kwargs = base_kwargs.copy()\n            if next_token != '':\n                kwargs.update({'ContinuationToken': next_token})\n            results = self.s3_client.list_objects_v2(**kwargs)\n            contents = results.get('Contents')\n            for i in contents:\n                k = i.get('Key')\n                if k[-1] != '/':\n                    keys.append(k)\n                else:\n                    dirs.append(k)\n                \n            next_token = results.get('NextContinuationToken')\n\n        for d in dirs:\n            dest_pathname = self.out_path.joinpath(d)\n            dest_pathname.mkdir(parents=True, exist_ok=True)\n\n        for k in tqdm(keys):\n            dest_pathname = self.out_path.joinpath(k)\n            dest_pathname.parent.mkdir(parents=True, exist_ok=True)\n            self.s3_client.download_file(self.bucket_name, k, str(dest_pathname))   \n","key":"T9qoFz8E97"},{"type":"output","id":"8Ruv8N0dca4JBDup69Nug","data":[],"key":"LoUPazQSvm"}],"key":"vEZ8digqnL"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":4,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"2.2 Run conversion from Batch results to EOPatches","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"YjKiD0DBKI"}],"identifier":"id-2-2-run-conversion-from-batch-results-to-eopatches","label":"2.2 Run conversion from Batch results to EOPatches","html_id":"id-2-2-run-conversion-from-batch-results-to-eopatches","implicit":true,"key":"BDCoYREPaJ"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Now all the parameters are set, we can run the conversion. For this step there are 2 available options:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"w4LWpbdUxL"}],"key":"iUgNBizjLa"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":5,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Download the contents of the Amazon S3 Bucket to a local file and convert locally to ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"BgbhYQVZL0"},{"type":"inlineCode","value":"EOPatches","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"IYE79Rk3BV"}],"key":"qEYFkR8Z24"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Convert the data from the Amazon S3 Bucket and download the ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"NSOBBidJVt"},{"type":"inlineCode","value":"EOPatches","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"QHINKAmqfz"}],"key":"GEqeueyMnx"}],"key":"jdMPKNXfjS"}],"key":"w3Oe8iaePY"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"First, we make an object, initialising it with the necessary parameters to perform the conversion.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"pysyb2oRe4"}],"key":"BO3zodAExA"}],"key":"idB7VPi6Fl"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Make class to convert Batch to EOPatches\nbatch2eolearn = ImportFromAWS(AWS_ID, AWS_SECRET, aws_bucket_name,\n                              request_id, band_names, timestamps, is_data=is_data_band, \n                              out_path=save_folder)","key":"Yo6B4vMJyK"},{"type":"output","id":"a-u730CRqnvRgGapCvdB-","data":[],"key":"FcExpQHy87"}],"key":"ioijIRZBMa"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":5,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Option 1: Dowload Bucket and convert locally","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Tg28zNCkGi"}],"identifier":"option-1-dowload-bucket-and-convert-locally","label":"Option 1: Dowload Bucket and convert locally","html_id":"option-1-dowload-bucket-and-convert-locally","implicit":true,"key":"FSw50d53S3"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"You can use the in-build function below to download your Amazon Bucket contents, or skip the cell and sync the Bucket using the aws cli tool.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"AhFtVSutAh"}],"key":"kk6K5tuHw6"}],"key":"RW4EXd7Hvf"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Download Batch results from Bucket\nbatch2eolearn.download_from_bucket(obj_id=\"S3\")","key":"kaZooGpxdF"},{"type":"output","id":"GQmngyqjVLxoXsrnIY8x_","data":[{"name":"stdout","output_type":"stream","text":"Downloading bucket contents\n"},{"output_type":"display_data","metadata":{},"data":{"application/vnd.jupyter.widget-view+json":{"content":"{\"model_id\":\"624b5a377ad3430c8ed51f6561f03918\",\"version_major\":2,\"version_minor\":0}","content_type":"application/vnd.jupyter.widget-view+json"},"text/plain":{"content":"  0%|          | 0/101 [00:00<?, ?it/s]","content_type":"text/plain"}}}],"key":"afFKBF5dDv"}],"key":"vHH2mT6sM0"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"If you specify the folder name containing the Batch request data in the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Jy7KxOtKyD"},{"type":"inlineCode","value":"convert_to_EOPatches","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"UQG9iy5NMN"},{"type":"text","value":" function, the conversion will be performed locally.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ipGErqCXli"}],"key":"LUtPOoJojg"}],"key":"xGHKAhgUfr"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Convert local data to EOPatches\nbatch2eolearn.convert_to_EOPatches(local_bucket=f\"{save_folder}/{request_id}\")","key":"RF4x298HPt"},{"type":"output","id":"oeCKSjkpPWBGoSslGjlaS","data":[{"output_type":"display_data","metadata":{},"data":{"application/vnd.jupyter.widget-view+json":{"content":"{\"model_id\":\"82982a95d6414c61b08130f9360a7d7d\",\"version_major\":2,\"version_minor\":0}","content_type":"application/vnd.jupyter.widget-view+json"},"text/plain":{"content":"  0%|          | 0/10 [00:00<?, ?it/s]","content_type":"text/plain"}}}],"key":"gnmQwBdnDa"}],"key":"oEt3quJViM"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":5,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Option 2: Convert in Bucket and download EOPatches","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"z2r8aw49DI"}],"identifier":"option-2-convert-in-bucket-and-download-eopatches","label":"Option 2: Convert in Bucket and download EOPatches","html_id":"option-2-convert-in-bucket-and-download-eopatches","implicit":true,"key":"faw2heTruq"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"The following cell allows you to convert the data that is stored on the Amazon S3 Bucket. Using the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"fM04frH6bR"},{"type":"inlineCode","value":"save_locally","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"K6bo5pcwFA"},{"type":"text","value":" True/False flag you can either directly save the EOPatches on your computer or store them on the Amazon S3 Bucket.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"CMAsvIT3Bv"}],"key":"fQtkhyZutE"}],"key":"MvEDFcNmGy"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Convert Batch results in the Amazon Bucket to EoPatches\n# batch2eolearn.convert_to_EOPatches(save_locally=False)\nbatch2eolearn.convert_to_EOPatches(save_locally=False)","key":"hVI7pyCXhT"},{"type":"output","id":"VUnOMI7sS_u6NptThfXQP","data":[{"output_type":"display_data","metadata":{},"data":{"application/vnd.jupyter.widget-view+json":{"content":"{\"model_id\":\"7d28b618f80b4341a38b54cc292ede3a\",\"version_major\":2,\"version_minor\":0}","content_type":"application/vnd.jupyter.widget-view+json"},"text/plain":{"content":"  0%|          | 0/10 [00:00<?, ?it/s]","content_type":"text/plain"}}}],"key":"j6zntJpPg5"}],"key":"RxvBOvuHT5"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"If you save the EOPatches to your Amazon Bucket, you can either download them by using the inbuilt command below or using an other method of your choice (e.g. ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xhuDDaUPDX"},{"type":"inlineCode","value":"aws cli","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"e4c3jYN2kP"},{"type":"text","value":").","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"HbuXa7ZN5z"}],"key":"K12EUQw6ir"}],"key":"gEQp7HLnbv"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Rename the folder created in option 1\nos.rename(\"./results/EOPatches\", \"./results/EOPatches_opt1\")\n\n# Download EOPatches from Bucket\nbatch2eolearn.download_from_bucket(obj_id=\"EO\")","key":"aEpzleK2z9"},{"type":"output","id":"UTkGNXJ8_MMDofUo_IVY7","data":[{"name":"stdout","output_type":"stream","text":"Downloading bucket contents\n"},{"output_type":"display_data","metadata":{},"data":{"application/vnd.jupyter.widget-view+json":{"content":"{\"model_id\":\"3e603a897a0b4d07b1debe73ebe6ffd4\",\"version_major\":2,\"version_minor\":0}","content_type":"application/vnd.jupyter.widget-view+json"},"text/plain":{"content":"  0%|          | 0/50 [00:00<?, ?it/s]","content_type":"text/plain"}}}],"key":"PRhUr5zytU"}],"key":"Rc6YhIhvBL"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Step 3: continue processing data using EOPatches","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"wywuMC1phV"}],"identifier":"step-3-continue-processing-data-using-eopatches","label":"Step 3: continue processing data using EOPatches","html_id":"step-3-continue-processing-data-using-eopatches","implicit":true,"key":"jglxryaXEl"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Now we have the EOPatches saved locally, we can continue the process as shown in the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"xFPVcAppMa"},{"type":"link","url":"https://eo-learn.readthedocs.io/en/latest/examples.html#land-use-and-land-cover","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"example EOLearn Notebook","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"LQHYy7Aal9"}],"urlSource":"https://eo-learn.readthedocs.io/en/latest/examples.html#land-use-and-land-cover","key":"pXBUlJ7YGt"},{"type":"text","value":".","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ew9lumUd0S"}],"key":"SDPZy4vodB"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Before continuing with ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"jJDEVExqta"},{"type":"strong","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Model construction and training","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"rbCmzRsnbC"}],"key":"lfRpowXEvm"},{"type":"text","value":" (see ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"zXU3IXp40g"},{"type":"link","url":"https://eo-learn.readthedocs.io/en/latest/examples/land-cover-map/SI_LULC_pipeline.html#6.-Model-construction-and-training","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"here","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"a4hsGkVl2E"}],"urlSource":"https://eo-learn.readthedocs.io/en/latest/examples/land-cover-map/SI_LULC_pipeline.html#6.-Model-construction-and-training","key":"LUzqXL9Bmj"},{"type":"text","value":") we will need to import the reference data for Slovenia first. Since we are querying data over Slovenia, we need to fetch the reference data for the whole country ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"l276L5iQXF"},{"type":"link","url":"http://eo-learn.sentinel-hub.com/","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"here","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"w6mGYRcMih"}],"urlSource":"http://eo-learn.sentinel-hub.com/","key":"iuak4guxr1"},{"type":"text","value":".","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"VhWK04unDH"}],"key":"b84qkMh823"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"For this example, the reference data prepared for Ljubljana can be downloaded ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"QsS8AGcetH"},{"type":"link","url":"https://github.com/sentinel-hub/eo-learn/blob/master/examples/batch-processing/data/ljubljana_ref.gpkg","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"here","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"yRrtED3Es2"}],"urlSource":"https://github.com/sentinel-hub/eo-learn/blob/master/examples/batch-processing/data/ljubljana_ref.gpkg","data":{"kind":"file","org":"sentinel-hub","repo":"eo-learn","reference":"master","file":"examples/batch-processing/data/ljubljana_ref.gpkg","raw":"https://raw.githubusercontent.com/sentinel-hub/eo-learn/master/examples/batch-processing/data/ljubljana_ref.gpkg"},"internal":false,"protocol":"github","key":"LwdyXO9F9e"},{"type":"text","value":".","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"AKxPy97LC4"}],"key":"TRZobzs1uy"}],"key":"BxBxmH235P"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":4,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"3.1 Prepare the data to train the LULC prediction model","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"mhegG0z63N"}],"identifier":"id-3-1-prepare-the-data-to-train-the-lulc-prediction-model","label":"3.1 Prepare the data to train the LULC prediction model","html_id":"id-3-1-prepare-the-data-to-train-the-lulc-prediction-model","implicit":true,"key":"T6tAGvnFhG"},{"type":"heading","depth":5,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"3.1.1 Setup reference data","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"I9W5JKmxcf"}],"identifier":"id-3-1-1-setup-reference-data","label":"3.1.1 Setup reference data","html_id":"id-3-1-1-setup-reference-data","implicit":true,"key":"aZskIBU0vZ"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"For this example, a subset of the country-wide reference for land-use-land-cover is provided. It is available in the form of a geopackage, which contains polygons and their corresponding labels. The labels represent the following 10 classes:","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"N2pgzIGjLu"}],"key":"MMvl0A5cor"}],"key":"ptce1bklEP"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":1,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"lulcid = 0, name = no data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"NMnIQ51qv8"}],"key":"hHSVVnkOhF"},{"type":"listItem","spread":true,"position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"lulcid = 1, name = cultivated land","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"rbC8rWcLVt"}],"key":"Q4Fiy6SUfZ"},{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"lulcid = 2, name = forest","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"UAfeNvXcRK"}],"key":"Hw7ch53dAu"},{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"lulcid = 3, name = grassland","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"hTNeRy0Bz8"}],"key":"BYVaauf2Ou"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"lulcid = 4, name = shrubland","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"dHUkRIv6xH"}],"key":"M8abEponvL"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"lulcid = 5, name = water","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"jF4Ws4kF1K"}],"key":"FdBHLSzDrv"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"lulcid = 6, name = wetlands","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"kQStUpJL46"}],"key":"ng942KTMiH"},{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"lulcid = 7, name = tundra","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"OxD3ZWh2mv"}],"key":"LtKg74NCVx"},{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"lulcid = 8, name = artificial surface","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"uXfPQlxMCk"}],"key":"pe7qWP3ddV"},{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"lulcid = 9, name = bareland","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"Jf03ydh2Uq"}],"key":"HGGtwEwYuP"},{"type":"listItem","spread":true,"position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"lulcid = 10, name = snow and ice","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"a727vYpfOH"}],"key":"NPlUHmJpIR"}],"key":"UwBEH1xROK"}],"key":"jxC7KKQP8t"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"class LULC(MultiValueEnum):\n    \"\"\" Enum class containing basic LULC types\n    \"\"\"\n    NO_DATA            = 'No Data',            0,  '#ffffff'\n    CULTIVATED_LAND    = 'Cultivated Land',    1,  '#ffff00'\n    FOREST             = 'Forest',             2,  '#054907'\n    GRASSLAND          = 'Grassland',          3,  '#ffa500'\n    SHRUBLAND          = 'Shrubland',          4,  '#806000'\n    WATER              = 'Water',              5,  '#069af3'\n    WETLAND            = 'Wetlands',           6,  '#95d0fc'\n    TUNDRA             = 'Tundra',             7,  '#967bb6'\n    ARTIFICIAL_SURFACE = 'Artificial Surface', 8,  '#dc143c'\n    BARELAND           = 'Bareland',           9,  '#a6a6a6'\n    SNOW_AND_ICE       = 'Snow and Ice',       10, '#000000'\n\n    @property\n    def id(self):\n        \"\"\" Returns an ID of an enum type\n\n        :return: An ID\n        :rtype: int\n        \"\"\"\n        return self.values[1]\n\n    @property\n    def color(self):\n        \"\"\" Returns class color\n\n        :return: A color in hexadecimal representation\n        :rtype: str\n        \"\"\"\n        return self.values[2]\n\n\ndef get_bounds_from_ids(ids):\n    bounds = []\n    for i in range(len(ids)):\n        if i < len(ids) - 1:\n            if i == 0:\n                diff = (ids[i + 1] - ids[i]) / 2\n                bounds.append(ids[i] - diff)\n            diff = (ids[i + 1] - ids[i]) / 2\n            bounds.append(ids[i] + diff)\n        else:\n            diff = (ids[i] - ids[i - 1]) / 2\n            bounds.append(ids[i] + diff)\n    return bounds\n\n\n# Reference colormap things\nlulc_bounds = get_bounds_from_ids([x.id for x in LULC])\nlulc_cmap = ListedColormap([x.color for x in LULC], name=\"lulc_cmap\")\nlulc_norm = BoundaryNorm(lulc_bounds, lulc_cmap.N)","key":"y8Gs5v4vEw"},{"type":"output","id":"MuGYBBUiZD8GLfK1Zry1p","data":[],"key":"UTYlfxAmxF"}],"key":"OiAFHUTP6L"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The main point of this task is to create a raster mask from the vector polygons and add it to the eopatch. With this procedure, any kind of a labeled shapefile can be transformed into a raster reference map. This result is achieved with the existing task ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"aUggQ30uR3"},{"type":"inlineCode","value":"VectorToRaster","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"fHOkGK1yKw"},{"type":"text","value":" from the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"IEje4uhMww"},{"type":"inlineCode","value":"eolearn.geometry package","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"UItnMwwZ1a"},{"type":"text","value":". All polygons belonging to the each of the classes are separately burned to the raster mask.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xDZlNHiDpR"}],"key":"YJ6zWctuw6"}],"key":"F3NwRfhj4f"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# This step takes some time due to the large size of the reference data (https://github.com/sentinel-hub/eo-learn/blob/master/examples/batch-processing/data/ljubljana_ref.gpkg)\nland_use_ref_path = INPUT_DATA.joinpath('ljubljana_ref.gpkg')\n\nland_use_ref = gpd.read_file(land_use_ref_path)\n\nrasterization_task = VectorToRasterTask(land_use_ref, (FeatureType.MASK_TIMELESS, 'LULC'),\n                                    values_column='lulcid', raster_shape=(FeatureType.MASK, 'IS_DATA'),\n                                    raster_dtype=np.uint8)","key":"x08IJ31ces"},{"type":"output","id":"6flqbi-nw5qNDaBiWy8TD","data":[],"key":"orWRedritP"}],"key":"KxuaCOkFkn"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":5,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"3.1.2 Define the workflow","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"lTpThVChTP"}],"identifier":"id-3-1-2-define-the-workflow","label":"3.1.2 Define the workflow","html_id":"id-3-1-2-define-the-workflow","implicit":true,"key":"cG4lvu0Pej"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Now we want to incorporate the reference data to the EOPatches, we need to load and update the existing patches with the reference data (see ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"X9oRvSuTaC"},{"type":"link","url":"https://eo-learn.readthedocs.io/en/latest/examples/land-cover-map/SI_LULC_pipeline.html#Reference-map-task","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"here","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"NfvIfh254U"}],"urlSource":"https://eo-learn.readthedocs.io/en/latest/examples/land-cover-map/SI_LULC_pipeline.html#Reference-map-task","key":"QY3hQa70lR"},{"type":"text","value":"). We also want to perform the erosion step shown in the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"BGMRh9UbA2"},{"type":"link","url":"https://eo-learn.readthedocs.io/en/latest/examples/land-cover-map/SI_LULC_pipeline.html#5.-Prepare-the-training-data","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"EOLearn LULC example","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"WecvNUyZmR"}],"urlSource":"https://eo-learn.readthedocs.io/en/latest/examples/land-cover-map/SI_LULC_pipeline.html#5.-Prepare-the-training-data","key":"YFOz4EW6rx"},{"type":"text","value":" in order to “clean” the data, as described in this ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"bJWyQTQJxg"},{"type":"link","url":"https://medium.com/sentinel-hub/land-cover-classification-with-eo-learn-part-2-bd9aa86f8500","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"blog post","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"oIQV79wPk7"}],"urlSource":"https://medium.com/sentinel-hub/land-cover-classification-with-eo-learn-part-2-bd9aa86f8500","key":"KRR08wCpwS"},{"type":"text","value":".","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"D6RAEkumSu"}],"key":"lJ4CtW296m"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"We will also prepare the model training data (see ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"Ta7Us44F42"},{"type":"link","url":"https://eo-learn.readthedocs.io/en/latest/examples/land-cover-map/SI_LULC_pipeline.html#5.-Prepare-the-training-data","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"here","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"ALEkNmiVgA"}],"urlSource":"https://eo-learn.readthedocs.io/en/latest/examples/land-cover-map/SI_LULC_pipeline.html#5.-Prepare-the-training-data","key":"YyyJlyYddB"},{"type":"text","value":") by performing random spatial sampling of the EOPatches, and finally split patches for training/validation.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"pHYvv2hyFE"}],"key":"FlH0mtZbdn"},{"type":"paragraph","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"The following workflow is created and executed:","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"xKKvRFeTVR"}],"key":"wEWbHVpras"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":10,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Load the existing EOPatches containing satellite data","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"qIXEhpgHzx"}],"key":"fZJkHK6sUt"},{"type":"listItem","spread":true,"position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Add rasterised reference data","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"qzkA6fT8Lh"}],"key":"qY09bRuRDo"},{"type":"listItem","spread":true,"position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Perform erosion task on reference data","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"a3ZeQjVXK8"}],"key":"SjewuNhdQn"},{"type":"listItem","spread":true,"position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"Random spatial sampling of the EOPatches","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"Xtki7Itl1Q"}],"key":"rmqjzIDGGM"},{"type":"listItem","spread":true,"position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Split patches for training/validation","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"Fcz1Dfyklq"}],"key":"hd5l0WlMxl"},{"type":"listItem","spread":true,"position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"Save updated EOPatches","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"WjABGx7fdo"}],"key":"YdIq7VqSRU"}],"key":"A7NPnpjlNd"}],"key":"JIpCdCbGtT"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"First we set up the tasks:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"gdh3uvdfbQ"}],"key":"JGYgC5XiyC"}],"key":"dybBV6ybSJ"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Task for LOAD\nload = LoadTask(f\"{save_folder}/EOPatches\")\n\n# TASK FOR EROSION\n# erode each class of the reference map\nerosion = ErosionTask(mask_feature=(FeatureType.MASK_TIMELESS,'LULC','LULC_ERODED'), disk_radius=1)\n\n# TASK FOR SPATIAL SAMPLING\n# Uniformly sample about pixels from patches\nn_samples = 500000 # half of pixels (1000*1000 patches here)\nref_labels = list(range(11)) # reference labels to take into account when sampling\nspatial_sampling = FractionSamplingTask(\n    features_to_sample=[  # tag fields to sample\n        (FeatureType.DATA, 'FEATURES', 'FEATURES_SAMPLED'),\n        (FeatureType.MASK_TIMELESS, 'LULC_ERODED', 'LULC_ERODED_SAMPLED')],\n    sampling_feature=(FeatureType.MASK_TIMELESS, 'LULC_ERODED'),\n    fraction=0.5\n)\n\n# TASK FOR SAVING\nsave = SaveTask(f\"{save_folder}/EOPatches\", overwrite_permission=OverwritePermission.OVERWRITE_PATCH)","key":"RFXhHjii6R"},{"type":"output","id":"z145O4U6ewDghyWyhBcsT","data":[],"key":"VpDP2Gv74y"}],"key":"i80SWaqxh3"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Then we wrap tasks into nodes:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Hxo2lygF9U"}],"key":"AcSBuilbpp"}],"key":"IgC3db9f59"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# load_node = EONode(load, inputs=[], name=\"Load Task\")\n# erosion_node = EONode(erosion, inputs=[load_node], name=\"Erode Task\")\n# sampling_node = EONode(spatial_sampling, inputs=[erosion_node], name=\"Spatial Sampling Task\")\n# save_node = EONode(save, inputs=[sampling_node], name=\"Save Task\")\nlinked_nodes = linearly_connect_tasks(\n    (load, \"Load Task\"),\n    (rasterization_task, \"Rasterize Task\"),\n    (erosion, \"Erode Task\"), \n    (spatial_sampling, \"Spatial Sampling Task\"),\n    (save, \"Save Task\")\n)","key":"ZZnbWNhda6"},{"type":"output","id":"VeheI8vvD0_zEpwf6aOoS","data":[],"key":"cnJT4BdNNo"}],"key":"fRMCLtxJtd"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Define the workflow\nworkflow = EOWorkflow(linked_nodes)\n\n# Let's visualize it\nworkflow.dependency_graph()","key":"EjjOHwpw1F"},{"type":"output","id":"mWG6wekUGda2qZ-yP2YFg","data":[{"output_type":"execute_result","execution_count":44,"metadata":{},"data":{"image/svg+xml":{"content":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.50.0 (20220117.2223)\n -->\n<!-- Pages: 1 -->\n<svg width=\"743pt\" height=\"44pt\"\n viewBox=\"0.00 0.00 743.45 44.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 40)\">\n<polygon fill=\"white\" stroke=\"transparent\" points=\"-4,4 -4,-40 739.45,-40 739.45,4 -4,4\"/>\n<!-- Load Task -->\n<g id=\"node1\" class=\"node\">\n<title>Load Task</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"47.45\" cy=\"-18\" rx=\"47.39\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"47.45\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\">Load Task</text>\n</g>\n<!-- Rasterize Task -->\n<g id=\"node2\" class=\"node\">\n<title>Rasterize Task</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"192.64\" cy=\"-18\" rx=\"61.99\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"192.64\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\">Rasterize Task</text>\n</g>\n<!-- Load Task&#45;&gt;Rasterize Task -->\n<g id=\"edge1\" class=\"edge\">\n<title>Load Task&#45;&gt;Rasterize Task</title>\n<path fill=\"none\" stroke=\"black\" d=\"M94.94,-18C103.15,-18 111.88,-18 120.59,-18\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"120.78,-21.5 130.78,-18 120.78,-14.5 120.78,-21.5\"/>\n</g>\n<!-- Erode Task -->\n<g id=\"node3\" class=\"node\">\n<title>Erode Task</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"340.43\" cy=\"-18\" rx=\"50.09\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"340.43\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\">Erode Task</text>\n</g>\n<!-- Rasterize Task&#45;&gt;Erode Task -->\n<g id=\"edge2\" class=\"edge\">\n<title>Rasterize Task&#45;&gt;Erode Task</title>\n<path fill=\"none\" stroke=\"black\" d=\"M254.62,-18C263.05,-18 271.7,-18 280.1,-18\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"280.2,-21.5 290.2,-18 280.2,-14.5 280.2,-21.5\"/>\n</g>\n<!-- Spatial Sampling Task -->\n<g id=\"node4\" class=\"node\">\n<title>Spatial Sampling Task</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"516.81\" cy=\"-18\" rx=\"90.18\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"516.81\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\">Spatial Sampling Task</text>\n</g>\n<!-- Erode Task&#45;&gt;Spatial Sampling Task -->\n<g id=\"edge3\" class=\"edge\">\n<title>Erode Task&#45;&gt;Spatial Sampling Task</title>\n<path fill=\"none\" stroke=\"black\" d=\"M390.93,-18C398.89,-18 407.37,-18 416.02,-18\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"416.23,-21.5 426.23,-18 416.23,-14.5 416.23,-21.5\"/>\n</g>\n<!-- Save Task -->\n<g id=\"node5\" class=\"node\">\n<title>Save Task</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"689.3\" cy=\"-18\" rx=\"46.29\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"689.3\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\">Save Task</text>\n</g>\n<!-- Spatial Sampling Task&#45;&gt;Save Task -->\n<g id=\"edge4\" class=\"edge\">\n<title>Spatial Sampling Task&#45;&gt;Save Task</title>\n<path fill=\"none\" stroke=\"black\" d=\"M607.55,-18C616.12,-18 624.64,-18 632.74,-18\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"632.76,-21.5 642.76,-18 632.76,-14.5 632.76,-21.5\"/>\n</g>\n</g>\n</svg>\n","content_type":"image/svg+xml"},"text/plain":{"content":"<graphviz.graphs.Digraph at 0x7f01d646dc10>","content_type":"text/plain"}}}],"key":"dghpCl8TCL"}],"key":"Epf5UmvGDU"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":5,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"3.1.3 Run the EOWorkflow over all EOPatches","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"R0gng7jan4"}],"identifier":"id-3-1-3-run-the-eoworkflow-over-all-eopatches","label":"3.1.3 Run the EOWorkflow over all EOPatches","html_id":"id-3-1-3-run-the-eoworkflow-over-all-eopatches","implicit":true,"key":"RfnxaLyqmh"}],"key":"e3S3NdQ0Pe"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"%%time\n   \nexecution_args = []\nfor patch in Path(save_folder).joinpath(\"EOPatches\").iterdir():\n     execution_args.append({\n         linked_nodes[0]: {'eopatch_folder': patch.name},\n         linked_nodes[3]: {'seed': 42},\n         linked_nodes[-1]: {'eopatch_folder': patch.name}\n    })\n\nexecutor = EOExecutor(workflow, execution_args, save_logs=True)\nexecutor.run(workers=1, multiprocess=False)\n\nexecutor.make_report()","key":"RaafkDYnDY"},{"type":"output","id":"QTEHS92qwoxabWdbZHWWU","data":[{"output_type":"display_data","metadata":{},"data":{"application/vnd.jupyter.widget-view+json":{"content":"{\"model_id\":\"02a3be6d209c4a9f867900543f9b3522\",\"version_major\":2,\"version_minor\":0}","content_type":"application/vnd.jupyter.widget-view+json"},"text/plain":{"content":"  0%|          | 0/10 [00:00<?, ?it/s]","content_type":"text/plain"}}},{"name":"stdout","output_type":"stream","text":"CPU times: user 51.1 s, sys: 48.8 s, total: 1min 39s\nWall time: 8min 23s\n"}],"key":"auHEYUR9yL"}],"key":"UqiSVgFhJj"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":4,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"3.2 Visualize the patches","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"NrbD8UNvCQ"}],"identifier":"id-3-2-visualize-the-patches","label":"3.2 Visualize the patches","html_id":"id-3-2-visualize-the-patches","implicit":true,"key":"O0Updclrgk"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Now we have EOPatches ready for analysis, we can visualise them before continuing.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"pUtsdE0pjs"}],"key":"dEaf3mz5uj"}],"key":"aSVefpMoy6"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Load a random patch\npatch_ID = 5","key":"gwej9ghfmX"},{"type":"output","id":"Hm0xbvVlgDHhQEyEighm6","data":[],"key":"B9RLqkgnRo"}],"key":"crFGVquFPF"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"RGB True Color of a Patch","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"v2E77VbHU9"}],"key":"cj4QBXdg2I"}],"key":"T6PcNRuvju"}],"key":"HrEzPsrlHP"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"fig, ax = plt.subplots(1,figsize=(12,12))\neopatch = EOPatch.load(f'{save_folder}/EOPatches/eopatch_{patch_ID}', lazy_loading=True)\neopatch\nax.imshow(np.clip(eopatch.data['FEATURES'][1][..., [2, 1, 0]] * 3.5, 0, 1))\nax.set_xticks([])\nax.set_yticks([])\nax.set_aspect(1)\nplt.show()\neopatch = None","key":"MmdUw0rRgp"},{"type":"output","id":"hfElk7hmhDwmuG7c_lCDF","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"a5658cbe4881fe710ac599d8f3ad4d7c","path":"/example-viewer/build/a5658cbe4881fe710ac599d8f3ad4d7c.png"},"text/plain":{"content":"<Figure size 864x864 with 1 Axes>","content_type":"text/plain"}}}],"key":"IMzEbfbxxt"}],"key":"amMm6lmxEU"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Temporal mean of NDVI of a patch","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Oz5cOU5udZ"}],"key":"arWhvgiUVi"}],"key":"LShOrPuNnQ"}],"key":"XP5AtiDblO"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"fig, ax = plt.subplots(figsize=(12,12))\neopatch = EOPatch.load(f'{save_folder}/EOPatches/eopatch_{patch_ID}', lazy_loading=True)\nndvi = eopatch.data['FEATURES'][:, :, :, 6]\nmask = eopatch.mask['IS_DATA'].squeeze()\nndvi[mask==0] = np.nan\nndvi_mean = np.nanmean(ndvi, axis=0).squeeze()\nim = ax.imshow(ndvi_mean, vmin=0, vmax=0.8, cmap=plt.get_cmap('YlGn'))\nax.set_xticks([])\nax.set_yticks([])\nax.set_aspect(1)\neopatch = None\n\ncb = fig.colorbar(im, ax=ax, orientation='horizontal', pad=0.01, aspect=100)\ncb.ax.tick_params(labelsize=20) \nplt.show()","key":"TtGN0InXc9"},{"type":"output","id":"gcYms_jf_-9A_yWSSSl8h","data":[{"output_type":"display_data","metadata":{"needs_background":"light"},"data":{"image/png":{"content_type":"image/png","hash":"31c46b8f9fce4aa18c9cae12a9e6fa25","path":"/example-viewer/build/31c46b8f9fce4aa18c9cae12a9e6fa25.png"},"text/plain":{"content":"<Figure size 864x864 with 2 Axes>","content_type":"text/plain"}}}],"key":"XIMvo5HN0v"}],"key":"eyjGAc9ByW"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Reference data example of a Patch","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"TtdD3kCkMM"}],"key":"HcCoY9ZL2e"}],"key":"ew5hCPDzvB"}],"key":"AGMxHuD8sX"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"fig, ax = plt.subplots(figsize=(12,12))\neopatch = EOPatch.load(f'{save_folder}/EOPatches/eopatch_{patch_ID}', lazy_loading=True)\n\nax.imshow(eopatch.mask_timeless['LULC'].squeeze(), cmap=lulc_cmap, norm=lulc_norm)\nax.set_xticks([])\nax.set_yticks([])\nax.set_aspect(1)\neopatch = None","key":"wUC6AAjZX4"},{"type":"output","id":"T2ae0Q2fApXgw8G-Y1zJW","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"42d5f651e938d4c0b5eeb5b0c435201d","path":"/example-viewer/build/42d5f651e938d4c0b5eeb5b0c435201d.png"},"text/plain":{"content":"<Figure size 864x864 with 1 Axes>","content_type":"text/plain"}}}],"key":"LJeOrLVm7z"}],"key":"kHgVuTONev"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Note:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xGknsAHfOc"}],"identifier":"note","label":"Note:","html_id":"note","implicit":true,"key":"Z5iA560ulq"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"At this point, we have a setup similar to what we would have at ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"P2nS02yC5W"},{"type":"link","url":"https://eo-learn.readthedocs.io/en/latest/examples/land-cover-map/SI_LULC_pipeline.html#6.-Model-construction-and-training","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Section 6","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"SEfi0FgjAp"}],"urlSource":"https://eo-learn.readthedocs.io/en/latest/examples/land-cover-map/SI_LULC_pipeline.html#6.-Model-construction-and-training","key":"vXkDYV03hx"},{"type":"text","value":" of the eo-learn LULC tutorial. If you are familiar with the process you can stop here, or you can continue the steps described in the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"QEE2aj6bRd"},{"type":"link","url":"https://github.com/sentinel-hub/eo-learn/blob/master/examples/land-cover-map/SI_LULC_pipeline.ipynb","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"the eo-learn example","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ZIdxTIsJID"}],"urlSource":"https://github.com/sentinel-hub/eo-learn/blob/master/examples/land-cover-map/SI_LULC_pipeline.ipynb","data":{"kind":"file","org":"sentinel-hub","repo":"eo-learn","reference":"master","file":"examples/land-cover-map/SI_LULC_pipeline.ipynb","raw":"https://raw.githubusercontent.com/sentinel-hub/eo-learn/master/examples/land-cover-map/SI_LULC_pipeline.ipynb"},"internal":false,"protocol":"github","key":"tUtAzYt5Xr"},{"type":"text","value":" Notebook from here on.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Ta7CwgFhY3"}],"key":"YcSunA7EbE"}],"key":"hZYkqFpJmY"}],"key":"Cwax2lKKM2"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"ESA EO \\phi- week 2020","url":"/external-notebooks/eurodatacube/notebooks/notebooks/contributions/gran-chaco-phiweek","group":"Contributions"},"next":{"title":"LPIS Use Case for Land Use / Land Cover Classification","url":"/external-notebooks/eurodatacube/notebooks/notebooks/contributions/lpis-lulc-slo","group":"Contributions"}}},"domain":"http://localhost:3000"}