{"version":1,"kind":"Notebook","sha256":"ecb62e2eca6626455715d67a484c1932fa1c33d8dff8b6339181dfde766fa4b9","slug":"external-notebooks.eurodatacube.notebooks.notebooks.contributions.aot-covid19","location":"/external_notebooks/eurodatacube/notebooks/notebooks/contributions/AOT_COVID19.ipynb","dependencies":[],"frontmatter":{"title":"Aerosol Optical Thickness (AOT) Anomaly Detection Using Sentinel-2","content_includes_title":true,"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"github":"https://github.com/eurodatacube/example-viewer","subject":"Euro Data Cube Examples","numbering":{"title":{"offset":5}},"edit_url":"https://github.com/eurodatacube/example-viewer/blob/main/external_notebooks/eurodatacube/notebooks/notebooks/contributions/AOT_COVID19.ipynb","exports":[{"format":"ipynb","filename":"AOT_COVID19.ipynb","url":"/example-viewer/build/AOT_COVID19-d7bb6719e565e235cf923625586243ae.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"from edc import setup_environment_variables\nsetup_environment_variables()","key":"xdjbrfavwc"},{"type":"output","id":"kwsCATh82p4YhJAs5SflV","data":[{"output_type":"display_data","metadata":{},"data":{"text/markdown":{"content":"API credentials have automatically been injected for your active subscriptions.  \nThe following environment variables are now available:\n* `SH_INSTANCE_ID`\n* `SH_CLIENT_ID`\n* `SH_CLIENT_SECRET`\n* `SH_CLIENT_NAME`\n","content_type":"text/markdown"},"text/plain":{"content":"<IPython.core.display.Markdown object>","content_type":"text/plain"}}}],"key":"i5AH4athAl"}],"key":"wZWziWSSSe"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Aerosol Optical Thickness (AOT) Anomaly Detection Using Sentinel-2","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"kBRsvRezFT"}],"identifier":"aerosol-optical-thickness-aot-anomaly-detection-using-sentinel-2","label":"Aerosol Optical Thickness (AOT) Anomaly Detection Using Sentinel-2","html_id":"aerosol-optical-thickness-aot-anomaly-detection-using-sentinel-2","implicit":true,"key":"jAATDsM8Vu"},{"type":"thematicBreak","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"S7mWz1vv2D"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Author: Henrik Fisser, 2020","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"rlOmMfO1ms"}],"key":"D49YHB88z6"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"This script was developed and executed on the EOxHub-hosted JupyterLab and uses xcube for computations on data cubes retrieved from the Sentinel Hub. To run this script you will need to ensure that you have access to these resources.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"Psu6mkL7rR"}],"key":"d7aMe97EtD"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"strong","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Important: This is a draft and was created during the COVID-19 crisis. Its purpose was to quickly implement an idea.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"ykd4YnqmgX"}],"key":"VrYo9PWQUh"}],"key":"uN6P7HEW7Y"},{"type":"heading","depth":2,"position":{"start":{"line":9,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"What does this script do?","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"p5fvIvOmPL"}],"identifier":"what-does-this-script-do","label":"What does this script do?","html_id":"what-does-this-script-do","implicit":true,"key":"zc8e5k5gP5"},{"type":"paragraph","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"During the COVID-19 crisis parts of the world were more or less locked up at home. The hypothesis is that these social distancing measures impact aerosol amounts in the troposphere. During the sen2cor (","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"Cf9jj3r6jL"},{"type":"link","url":"https://earth.esa.int/web/sentinel/technical-guides/sentinel-2-msi/level-2a/algorithm","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"https://​earth​.esa​.int​/web​/sentinel​/technical​-guides​/sentinel​-2​-msi​/level​-2a​/algorithm","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"OnjVgUZdJf"}],"urlSource":"https://earth.esa.int/web/sentinel/technical-guides/sentinel-2-msi/level-2a/algorithm","key":"YatKQSECIe"},{"type":"text","value":") atmospheric correction and preprocessing of Sentinel-2 the aerosol amount is calculated as the dimensionless aerosol optical thickness (AOT). We use this data from computing temporal AOT medians on a Sentinel-2 stack from a baseline period and from the lockdown period, since the AOT is spatially and temporally highly variable. The reference period must be the same season from previous year. This script covers the respective period from 2017, 2018 and 2019. Finally, the percentage AOT difference is calculated. We call this difference the ‘COVID-19 AOT anomaly’.","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"Lx6kdkbOQn"}],"key":"Nkho4Gy0mz"},{"type":"heading","depth":2,"position":{"start":{"line":13,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Questions or Feedback?","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"R2g2hsWyjV"}],"identifier":"questions-or-feedback","label":"Questions or Feedback?","html_id":"questions-or-feedback","implicit":true,"key":"yRmV9x2YVO"},{"type":"paragraph","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"Just send me a message :).","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"WFDztVtgrF"}],"key":"NP6pbtl7tu"},{"type":"heading","depth":2,"position":{"start":{"line":17,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"Load dependencies","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"IglLcXTJoJ"}],"identifier":"load-dependencies","label":"Load dependencies","html_id":"load-dependencies","implicit":true,"key":"OqNgKTuQbn"}],"key":"i3JrBRNPYl"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"from xcube_sh.cube import open_cube\nfrom xcube_sh.config import CubeConfig\nfrom xcube.core.maskset import MaskSet\n\nimport os\nimport geopandas as gpd\nimport xarray as xr\nimport shapely.geometry","key":"SnSKmOc9L8"},{"type":"output","id":"N3jV8r-Vl8Oz-Ej2xxcTe","data":[],"key":"UuHz9QxkWp"}],"key":"x1V3leP9xm"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"General parameters","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"J2u3EOH9l7"}],"identifier":"general-parameters","label":"General parameters","html_id":"general-parameters","implicit":true,"key":"DtARiARkHa"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"run_batch","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"GdT3LEEzJi"}],"key":"Fx8kptqRMT"},{"type":"text","value":": shall we process everything?","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"kbBZlhM7ed"},{"type":"break","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"AKQOx5ounF"},{"type":"emphasis","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"dataset","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"qdtxCoeLA1"}],"key":"LK4AQslhAg"},{"type":"text","value":": “S2L2A” for Sentinel-2 Level 2A","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"B6v1C2hIHa"},{"type":"break","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"x6Bp6HS3PJ"},{"type":"emphasis","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"spatial_res","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Jf6NHyXS85"}],"key":"jguE1CjRPG"},{"type":"text","value":": spatial resolution. AOT will be 20 m anyways but VIS 10 m, so request 10\n","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"yXT0ZuyBnl"},{"type":"emphasis","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"band_names","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"U34h1E4Nt2"}],"key":"dC64F8AHM9"},{"type":"text","value":":\nfor all years we need the AOT and the scene classification (SCL)","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"gvTDKq1ztd"},{"type":"break","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"QE0OWjaRv9"},{"type":"emphasis","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"band_names_2020","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"mqucRDo7Yn"}],"key":"RXERKsT6k0"},{"type":"text","value":": also request VIS bands for 2020 for visualization of the results.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"X9YxCGP1oq"},{"type":"break","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"RGRDSwrnIG"},{"type":"emphasis","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"time_period_before","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"kXBBSnPkUK"}],"key":"FQzUuryCH0"},{"type":"text","value":": this is the period in which we consider an observation to be valid. As we request data from several months from three years for the reference period before COVID-19 we use a period of five days in order no to request and process too much data.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"XavDJRLlGV"},{"type":"break","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"fPN7tP2Wo3"},{"type":"emphasis","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"time_period_after","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"YpG2jbqYMb"}],"key":"WxA9saogdl"},{"type":"text","value":": the periods during COVID-19 lockdown-like measures is short, so use all available observations.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"IzlAObZIuY"}],"key":"vMxZa0ZjXL"}],"key":"EUw44OTix9"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"run_batch = True # for batch processing\ndataset = \"S2L2A\"\nspatial_res = 0.00009 # 10m, AOT is 20 m though\nband_names = [\"AOT\", \"SCL\"]\nband_names_2020 = [\"B02\", \"B03\", \"B04\", \"AOT\", \"SCL\"]\nt = \"time\"\n\n# temporal parameters of data cubes\ntime_period_before = \"5D\"\ntime_period_after = \"1D\"","key":"AQtSN7IqH8"},{"type":"output","id":"lGSnuE212QoNV77b4a2Uw","data":[],"key":"GQowRbCUCr"}],"key":"NG1lFfuBuL"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Prepare areas of interest","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"paKErVCTaG"}],"identifier":"prepare-areas-of-interest","label":"Prepare areas of interest","html_id":"prepare-areas-of-interest","implicit":true,"key":"IPAPzJTvI8"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Some areas are loaded from geojsons, others are provided as bounding boxes from coordinates in the script.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"BiqiCeIM1a"}],"key":"kgEtlmMMSo"}],"key":"udzF9XAU2J"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# read areas of interest\ndef read_bbox(place):\n    aoi = gpd.read_file(os.path.expanduser(f\"~/.shared/notebooks/eurodatacube/notebooks/contributions/AOT_COVID-19/{place}.geojson\")).bounds.values[0]\n    return aoi[0].item(), aoi[1].item(), aoi[2].item(), aoi[3].item()\n\nplace = \"beijing\"\nbbox_beijing = read_bbox(place)\nstart_beijing = \"2020-02-09\"\nend_beijing = \"2020-03-15\"\nplace = \"rome\"\nbbox_rome = 12.35, 41.79, 12.65, 41.99\nstart_italy = \"2020-03-09\"\nplace = \"madrid\"\nbbox_madrid = read_bbox(place)\nstart_madrid = \"2020-03-14\"\nplace = \"berlin\"\nbbox_berlin = read_bbox(place)\nplace = \"london\"\nbbox_london = bbox = read_bbox(place)\nstart_london = \"2020-03-23\"\n# NOTE: bucharest is currently disabled due to missing .geojson file\n# place = \"bucharest\"\n# bbox_bucharest = bbox = read_bbox(place)\nstart_bucharest = \"2020-03-25\"\nplace = \"paris\"\nbbox_paris = 2., 48.675, 2.6, 49.05\nplace = \"brussels\"\nbbox_brussels = bbox = read_bbox(place)\nplace = \"budapest\"\nbbox_budapest = bbox = read_bbox(place)\nplace = \"prague\"\nbbox_prague = bbox = read_bbox(place)\nplace = \"athens\"\nbbox_athens = 23.6, 37.935, 23.8, 38.05\nplace = \"zurich\"\nbbox_zurich = bbox = read_bbox(place)\n\nbboxes = {\"beijing\":bbox_beijing, \"rome\":bbox_rome, \"madrid\":bbox_madrid, \n          \"berlin\":bbox_berlin, \"london\":bbox_london, # \"bucharest\":bbox_bucharest, \n          \"paris\":bbox_paris, \"brussels\":bbox_brussels, \"budapest\":bbox_budapest, \n          \"prague\":bbox_prague, \"athens\":bbox_athens, \"zurich\":bbox_zurich}","key":"Puh7GqYkS5"},{"type":"output","id":"311mekUbBfOREn30oFXvZ","data":[],"key":"oytjhdefAU"}],"key":"aQyivBsMvn"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Process area-wise","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"uRxFr46k81"}],"identifier":"process-area-wise","label":"Process area-wise","html_id":"process-area-wise","implicit":true,"key":"RcyGGbp6JP"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"This is scripted for batch processing. If you would like to test it e.g. only in one area just provide a single place name and the corresponding aoi in the bboxes dictionary.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"fz6k7MDQSC"},{"type":"break","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"GlGXORtjJe"},{"type":"text","value":"Since this is a very functional draft script, the handling of different lockdown period is kind of messy. Essentially, due to area-specific lockdown periods we have to provide different temporal bounds for the cubes.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"KrcGeVbFTc"}],"key":"gUjdr6sLho"}],"key":"z5aExnWG16"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"if run_batch:\n    for place in bboxes:\n        print(\"Processing: \" + place)\n        if not os.path.exists(place):\n            is_beijing = place == \"beijing\"\n            is_london = place == \"london\"\n            is_italy = place in [\"rome\", \"milan\"]\n            is_madrid = place == \"madrid\"\n            is_vienna = place == \"vienna\"\n            is_bucharest = place == \"bucharest\"\n\n            bbox = bboxes.get(place)\n\n            # cube 2017\n            start = \"2017-03-04\"\n            end = \"2017-05-05\"\n            start = \"2017-01-26\" if is_beijing else start\n            end = \"2017-03-29\" if is_beijing else end\n            start = \"2017-02-24\" if is_italy else start\n            start = \"2017-03-09\" if is_london else start\n            start = \"2017-03-01\" if is_madrid else start\n            start = \"2017-03-11\" if is_bucharest else start\n            cube_config_2017 = CubeConfig(dataset_name = dataset,\n                                        band_names = band_names,\n                                        tile_size = [512, 512],\n                                        geometry = bbox,\n                                        spatial_res = spatial_res,\n                                        time_range = [start, end],\n                                        time_period = time_period_before)\n            cube_2017 = open_cube(cube_config_2017)\n            scl = MaskSet(cube_2017.SCL)\n            cube_2017_masked = cube_2017.where((scl.no_data + \n                                                scl.cloud_shadows +\n                                                scl.clouds_high_probability + \n                                                scl.clouds_medium_probability) == 0)\n            cube_2017_masked = cube_2017_masked.drop_vars([\"SCL\"])\n\n            # cube 2018\n            start = \"2018-03-04\"\n            end = \"2018-05-05\"\n            start = \"2018-01-26\" if is_beijing else start\n            end = \"2018-03-29\" if is_beijing else end\n            start = \"2018-02-24\" if is_italy else start\n            start = \"2018-03-09\" if is_london else start\n            start = \"2018-03-01\" if is_madrid else start\n            start = \"2018-03-11\" if is_bucharest else start\n            cube_config_2018 = CubeConfig(dataset_name = dataset,\n                                        band_names = band_names,\n                                        tile_size = [512, 512],\n                                        geometry = bbox,\n                                        spatial_res = spatial_res,\n                                        time_range = [start, end],\n                                        time_period = time_period_before)\n            cube_2018 = open_cube(cube_config_2018)\n            scl = MaskSet(cube_2018.SCL)\n            cube_2018_masked = cube_2018.where((scl.no_data + \n                                                scl.cloud_shadows +\n                                                scl.clouds_high_probability + \n                                                scl.clouds_medium_probability) == 0)\n            cube_2018_masked = cube_2018_masked.drop_vars([\"SCL\"])\n\n            # cube 2019\n            start = \"2019-03-04\"\n            end = \"2019-05-05\"\n            start = \"2019-01-26\" if is_beijing else start\n            end = \"2019-03-29\" if is_beijing else end\n            start = \"2019-02-24\" if is_italy else start\n            start = \"2019-03-09\" if is_london else start\n            start = \"2019-03-01\" if is_madrid else start\n            start = \"2019-03-11\" if is_bucharest else start\n            cube_config_2019 = CubeConfig(dataset_name = dataset,\n                                         band_names = band_names,\n                                         tile_size = [512, 512],\n                                         geometry = bbox,\n                                         spatial_res = spatial_res,\n                                         time_range = [start, end],\n                                         time_period = time_period_before)\n            cube_2019 = open_cube(cube_config_2019)\n            scl = MaskSet(cube_2019.SCL)\n            cube_2019_masked = cube_2019.where((scl.no_data + \n                                                scl.cloud_shadows +\n                                                scl.clouds_high_probability + \n                                                scl.clouds_medium_probability) == 0)\n            cube_2019_masked = cube_2019_masked.drop_vars([\"SCL\"])\n\n            # median AOT 2017, 2018 and 2019\n            cube_171819 = xr.merge([cube_2017_masked, cube_2018_masked, cube_2019_masked])\n            median_aot_171819 = cube_171819.AOT.median(dim = t)\n\n            # cube 2020\n            start = \"2020-03-18\"\n            end = \"2020-04-21\"\n            start = start_italy if is_italy else start\n            start = start_beijing if is_beijing else start\n            start = start_london if is_london else start\n            start = start_madrid if is_madrid else start\n            start = start_bucharest if is_bucharest else start\n            end = end_beijing if is_beijing else end\n            cube_config_2020 = CubeConfig(dataset_name = dataset,\n                                         band_names = band_names_2020,\n                                         tile_size = [512, 512],\n                                         geometry = bbox,\n                                         spatial_res = spatial_res,\n                                         time_range = [start, end],\n                                         time_period = \"1D\")\n            cube_2020 = open_cube(cube_config_2020)\n            scl = MaskSet(cube_2020.SCL)\n            cube_2020_masked = cube_2020.where((scl.no_data + \n                                                scl.cloud_shadows +\n                                                scl.clouds_high_probability + \n                                                scl.clouds_medium_probability) == 0)\n            median_aot_2020 = cube_2020_masked.AOT.median(dim = t)\n\n            # percentage difference\n            diff_aot_percent = ((median_aot_2020 / median_aot_171819) * 100) - 100\n\n            # median RGB for visualization\n            median_red = cube_2020_masked.B04.median(dim = t)\n            median_green = cube_2020_masked.B03.median(dim = t)\n            median_blue = cube_2020_masked.B02.median(dim = t)\n\n            # write results\n            os.mkdir(place)\n            suffix = \"_\" + place + \".nc\"\n            diff_aot_percent.to_netcdf(os.path.join(place, \"aot_diff_percent\" + suffix))\n            median_aot_2020.to_netcdf(os.path.join(place, \"median_aot_2020\" + suffix))\n            median_aot_171819.to_netcdf(os.path.join(place, \"median_aot_171819\" + suffix))\n            median_red.to_netcdf(os.path.join(place, \"B04\" + suffix))\n            median_green.to_netcdf(os.path.join(place, \"B03\" + suffix))\n            median_blue.to_netcdf(os.path.join(place, \"B02\" + suffix))\n            print(\"Done with: \" + place)","key":"PATCHp38o5"},{"type":"output","id":"Z4CNb3r4KmfsX1UtebvqN","data":[],"key":"PBWfr30Mr4"}],"key":"sAcAWwvkSl"}],"key":"MiaFVVSymr"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Introduction","url":"/external-notebooks/eurodatacube/notebooks/notebooks/contributions/aireo-pilot-dataset-spacenet7","group":"Contributions"},"next":{"title":"Generating Zarr data cubes with Sentinel Hub Batch API","url":"/external-notebooks/eurodatacube/notebooks/notebooks/contributions/batch-zarr-output","group":"Contributions"}}},"domain":"http://localhost:3000"}